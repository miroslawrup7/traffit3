{"version":3,"sources":["main.js"],"names":["cityListBtnLoc","document","querySelector","cityListLoc","distanceListBtnLoc","distanceListLoc","sectorListBtnLoc","sectorListLoc","employmentFormListBtnLoc","employmentFormListLoc","workingHoursListBtnLoc","workingHoursListLoc","languageListBtnLoc","languageListLoc","awardedResultsLoc","recordsOnPageLoc","pagesSwitchLoc","brancheWrapperLoc","branchesLoc","jobFormLoc","jobTypeLoc","langLoc","citiesLoc","resultsLoc","remoteLoc","relocationLoc","searchInputLoc","distanceInputsLoc","querySelectorAll","distanceTitleLoc","searchBtn","addEventListener","classList","toggle","filteredRecordsArray_11","filterConfigData","apiPage","rawAPIArray","allRecordsArray","recordsNumber","recordsOnPage","filtersON","filterBranchesList","filterJobFormList","filterJobTypeList","filterLangList","filterCountriesList","filterListMaxHeight","forEach","elem","innerText","Number","value","dataset","distance","createRecordBoxes","recordsArray","firstRecordNumber","replaceChildren","i","borderColorClass","textColorClass","recruitmentType_colorOnly","length","indexOf","recruitmentType","formaZatrudnienia","jobForm","insertAdjacentHTML","url","lang","branche","name","city","jobType","visibleRate","salaryFrom","salaryTo","remote","relocation","createFilteredRecordsArray","branchesChildrenLoc","jobFormChildrenLoc","jobTypeChildrenLoc","langChildrenLoc","citiesChildrenLoc","filteredRecordsArray","selectedBranches","console","log","branche_filter","Array","from","filter","checked","map","filteredRecordsArray_1","el","index","addFlag","selectedFiltr","push","selectedJobForms","filteredRecordsArray_2","selectedjobTypes","filteredRecordsArray_3","selectedLangs","language_filter","filteredRecordsArray_4","filteredRecordsArray_6","selectedCity","location_city_filter","filteredRecordsArray_7","lati","longi","min_lati","max_lati","min_longi","max_longi","selectedDistance","parseInt","el_city","el_record","Math","cos","PI","filteredRecordsArray_8","filteredRecordsArray_9","filteredRecordsArray_10","searchText","position","description","field_id","toLowerCase","search","selectedRecruitmentType","recruitmentType_filter","setPages","pagesContainerStart","pagesContainer","add","dropDownBtnStart","dropDownLoc","showHideFilters","createFilterLists","branche_visible","sort","a","b","localeCompare","rowHeight","Object","keys","compare","key","reduce","accumulator","allCitiesObj","concat","allCitiesArray","changePage","pageBtn","pageButtonsLoc","remove","firstRecord","lastRecord","globActivePageNo","getWidth","max","body","scrollWidth","documentElement","offsetWidth","clientWidth","getHeight","scrollHeight","offsetHeight","clientHeight","maxPageBtns","pagesQuantityCalc","ceil","n","moveNextPagesBtns","e","target","createAwardedRecordBoxes","awardedRecordsArray","awarded","remote_filter","filterAwarded","location_country_filter","summariseDownload","recNumLoc","noResultsLoc","createDataForFilters","country","undefined","findIndex","arr_el","reworkData","options","job_location","parsedJobLocation","JSON","parse","advert","branches","language","job_type","_Widoczna_stawka","_spodziewane_wynagrodzenie_od","_spodziewane_wynagrodzenie_do","_relokacja","_rekrutacja_rodzaj","_forma_zatrudnienia","locality","parseFloat","latitude","longitude","values","getAPI","fetch","mode","headers","loopOnAPI","jsonData","createRecordsObjFromAPI","async","rawData","json","getConfigFilter","readConfigFilter","error"],"mappings":"AAAA,MAAAA,eAAAC,SAAAC,cAAA,qBACAC,YAAAF,SAAAC,cAAA,eACAE,mBAAAH,SAAAC,cAAA,yBACAG,gBAAAJ,SAAAC,cAAA,mBACAI,iBAAAL,SAAAC,cAAA,uBACAK,cAAAN,SAAAC,cAAA,iBACAM,yBAAAP,SAAAC,cAAA,gCACAO,sBAAAR,SAAAC,cAAA,0BACAQ,uBAAAT,SAAAC,cAAA,8BACAS,oBAAAV,SAAAC,cAAA,wBACAU,mBAAAX,SAAAC,cAAA,yBACAW,gBAAAZ,SAAAC,cAAA,mBAEAY,kBAAAb,SAAAC,cAAA,YACAa,iBAAAd,SAAAC,cAAA,oBACAc,eAAAf,SAAAC,cAAA,UAEAe,kBAAAhB,SAAAC,cAAA,WACAgB,YAAAjB,SAAAC,cAAA,cACAiB,WAAAlB,SAAAC,cAAA,uBACAkB,WAAAnB,SAAAC,cAAA,qBACAmB,QAAApB,SAAAC,cAAA,gBACAoB,UAAArB,SAAAC,cAAA,YACAqB,WAAAtB,SAAAC,cAAA,YAEAsB,UAAAvB,SAAAC,cAAA,WACAuB,cAAAxB,SAAAC,cAAA,eACAwB,eAAAzB,SAAAC,cAAA,cAEAyB,kBAAA1B,SAAA2B,iBAAA,mBACAC,iBAAA5B,SAAAC,cAAA,yBAEA4B,UAAA7B,SAAAC,cAAA,eAEAF,eAAA+B,iBAAA,SAAA,KACA5B,YAAA6B,UAAAC,OAAA,aAGA7B,mBAAA2B,iBAAA,SAAA,KACA1B,gBAAA2B,UAAAC,OAAA,aAGA3B,iBAAAyB,iBAAA,SAAA,KACAxB,cAAAyB,UAAAC,OAAA,aAGAzB,yBAAAuB,iBAAA,SAAA,KACAtB,sBAAAuB,UAAAC,OAAA,aAGAvB,uBAAAqB,iBAAA,SAAA,KACApB,oBAAAqB,UAAAC,OAAA,aAGArB,mBAAAmB,iBAAA,SAAA,KACAlB,gBAAAmB,UAAAC,OAAA,aAQA,IAaAC,wBAbAC,iBAAA,GACAC,QAAA,EACAC,YAAA,GACAC,gBAAA,GACAC,cAAA,EACAC,cAAA,GACAC,WAAA,EACAC,mBAAA,GACAC,kBAAA,GACAC,kBAAA,GACAC,eAAA,GACAC,oBAAA,GACAC,oBAAA,EAKApB,kBAAAqB,SAAAC,IACAA,EAAAlB,iBAAA,UAAA,KACAF,iBAAAqB,UAAA,IAAAC,OAAAF,EAAAG,YACAvB,iBAAAwB,QAAAC,SAAAH,OAAAF,EAAAG,aAWArC,iBAAAqC,MAAAZ,cAGA,MAAAe,kBAAA,CAAAC,EAAAC,EAAAjB,KAGA,IAFAjB,WAAAmC,kBAEAC,EAAAF,EAAAE,EAAAnB,EAAAmB,IAGA,GAAAH,EAAAG,GAAA,CACA,IAAAC,EAAA,GACAC,EAAA,GAEA1B,iBAAA2B,0BAAAC,SAgBA,IADA5B,iBAAA2B,0BAAAE,QAAA,OAGA,OAAAR,EAAAG,GAAAM,kBACAL,EAAA,YACAC,EAAA,YAMA,IADA1B,iBAAA2B,0BAAAE,QAAA,OAGA,OAAAR,EAAAG,GAAAM,kBACAL,EAAA,YACAC,EAAA,YAOA,IAFA1B,iBAAA2B,0BAAAE,QACA,QAGA,QAAAR,EAAAG,GAAAM,kBACAL,EAAA,aACAC,EAAA,cAxCA,OAAAL,EAAAG,GAAAM,kBACAL,EAAA,YACAC,EAAA,WAEA,OAAAL,EAAAG,GAAAM,kBACAL,EAAA,YACAC,EAAA,WAEA,QAAAL,EAAAG,GAAAM,kBACAL,EAAA,aACAC,EAAA,aAmCA,IAAAK,EAAA,GAEAV,EAAAG,GAAAQ,SACAX,EAAAG,GAAAQ,QAAAnB,SAAA,SAAAC,GACAiB,EACAA,EAAA,MAAAjB,EAAA,UAIA1B,WAAA6C,mBACA,YACA,YACAZ,EAAAG,GAAAU,2CACAT,gGAGAJ,EAAAG,GAAAW,gHAGAd,EAAAG,GAAAY,QACAf,EAAAG,GAAAY,QACA,sDAEAV,MACAL,EAAAG,GAAAa,0PAUAhB,EAAAG,GAAAc,oHAKAjB,EAAAG,GAAAe,QACA,wBACAlB,EAAAG,GAAAe,QACA,SACA,2BAGAlB,EAAAG,GAAAgB,aACAnB,EAAAG,GAAAiB,YACApB,EAAAG,GAAAkB,SACA,uBACArB,EAAAG,GAAAiB,WACA,MACApB,EAAAG,GAAAkB,SACA,SAEA,2BAGArB,EAAAG,GAAAmB,OACA,mCACA,2BAGAtB,EAAAG,GAAAoB,WACA,2CACA,uDAEAb,gJAcAc,2BAAA,KACA,MAAAC,EAAA/D,YAAAU,iBAAA,YACAsD,EAAA/D,WAAAS,iBAAA,YACAuD,EAAA/D,WAAAQ,iBAAA,YACAwD,EAAA/D,QAAAO,iBAAA,YAEAyD,EAAA/D,UAAAM,iBAAA,YAEA,IAAA0D,EAAAhD,gBAIAiD,EAAA,GAEAC,QAAAC,IAAAR,GAGAM,EADApD,iBAAAuD,eAAA3B,OACA5B,iBAAAuD,eAEAC,MAAAC,KAAAX,GACAY,QAAA,SAAA5C,GACA,OAAAA,EAAA6C,WAEAC,KAAA,SAAA9C,GACA,OAAAA,EAAAG,SAIAoC,QAAAC,IAAAF,GAEA,IAAAS,EAAA,GAEA,IAAAT,EAAAxB,OACAuB,EAAAtC,SAAA,CAAAiD,EAAAC,KACA,IAAAC,GAAA,EAEAZ,EAAAvC,SAAAoD,IACAH,EAAA1B,UAAA6B,IACAD,GAAA,MAIAA,GACAH,EAAAK,KAAAJ,MAIAD,EAAAV,EAGAE,QAAAC,IAAA,yBAAAO,GAIA,IAAAM,EAAA,GAEAd,QAAAC,IAAAP,GAEAoB,EAAAX,MAAAC,KAAAV,GACAW,QAAA,SAAA5C,GACA,OAAAA,EAAA6C,WAEAC,KAAA,SAAA9C,GACA,OAAAA,EAAAG,SAGAoC,QAAAC,IAAAa,GAEA,IAAAC,EAAA,GAEA,IAAAD,EAAAvC,OACAiC,EAAAhD,SAAA,CAAAiD,EAAAC,KACA,GAAAD,EAAA9B,QAAA,CACA,IAAAgC,GAAA,EAEAG,EAAAtD,SAAAoD,KACA,IAAAH,EAAA9B,QAAAH,QAAAoC,KACAD,GAAA,MAIAA,GACAI,EAAAF,KAAAJ,OAKAM,EAAAP,EAGAR,QAAAC,IAAA,yBAAAc,GAIA,IAAAC,EAAAb,MAAAC,KAAAT,GACAU,QAAA,SAAA5C,GACA,OAAAA,EAAA6C,WAEAC,KAAA,SAAA9C,GACA,OAAAA,EAAAG,SAGAqD,EAAA,GAEA,IAAAD,EAAAzC,OACAwC,EAAAvD,SAAA,CAAAiD,EAAAC,KACA,IAAAC,GAAA,EAEAK,EAAAxD,SAAAoD,IACAH,EAAAvB,UAAA0B,IACAD,GAAA,MAIAA,GACAM,EAAAJ,KAAAJ,MAIAQ,EAAAF,EAIA,IAAAG,EAAA,GAKAA,EAFAvE,iBAAAwE,gBAAA5C,OAEA5B,iBAAAwE,gBAEAhB,MAAAC,KAAAR,GACAS,QAAA,SAAA5C,GACA,OAAAA,EAAA6C,WAEAC,KAAA,SAAA9C,GACA,OAAAA,EAAAG,SAIA,IAAAwD,EAAA,GAEA,IAAAF,EAAA3C,OACA0C,EAAAzD,SAAA,CAAAiD,EAAAC,KACA,IAAAC,GAAA,EAEAO,EAAA1D,SAAAoD,IACAH,EAAA3B,OAAA8B,IACAD,GAAA,MAIAA,GACAS,EAAAP,KAAAJ,MAIAW,EAAAH,EAqGA,IAAAI,EAAAD,EAGAE,EAAA,GAEA3E,iBAAA4E,qBAAAhD,OACA+C,EAAA3E,iBAAA4E,sBAGAD,EAAAnB,MAAAC,KAAAP,GACAQ,QAAA,SAAA5C,GACA,GAAAA,EAAAG,MACA,OAAAH,EAAA6C,WAGAC,KAAA,SAAA9C,GACA,GAAAA,EAAAG,MACA,OAAAH,EAAAG,SAIAoC,QAAAC,IAAAqB,GACAtB,QAAAC,IAAAoB,IAIA,IAAAG,EAAA,GAEA,GAAAF,EAAA/C,OAAA,CAEA,IAIAkD,EACAC,EACAC,EACAC,EACAC,EACAC,EATAC,EAAAC,SAAA3F,iBAAAwB,QAAAC,UAEAkC,QAAAC,IAAA8B,GASAT,EAAA9D,SAAAyE,IACAZ,EAAA7D,SAAA,CAAA0E,EAAAxB,KACAuB,IAAAC,EAAAjD,OAEAwC,EAAAS,EAAAT,KACAC,EAAAQ,EAAAR,MAEAC,EAAAF,EAAA,QAAAM,EACAH,EAAAH,EAAA,QAAAM,EACAF,EAAAH,EAAA,SAAAK,EAAAI,KAAAC,IAAAX,EAAAU,KAAAE,GAAA,KACAP,EAAAJ,EAAA,SAAAK,EAAAI,KAAAC,IAAAX,EAAAU,KAAAE,GAAA,SAIAhB,EAAA7D,SAAA,CAAA0E,EAAAxB,KAEAwB,EAAAT,MAAAG,GACAM,EAAAT,MAAAE,GACAO,EAAAR,OAAAI,GACAI,EAAAR,OAAAG,GAEAL,EAAAX,KAAAqB,cAMAV,EAAAH,EAKA,IAAAiB,EAAA,GAEAtG,UAAAsE,SAAA3D,iBAAA,cACA6E,EAAAhE,SAAA,CAAAiD,EAAAC,KACA,IAAAC,GAAA,EAEAF,EAAAnB,SACAqB,GAAA,GAGAA,GACA2B,EAAAzB,KAAAJ,MAIA6B,EAAAd,EAKA,IAAAe,EAAA,GAEAtG,cAAAqE,QACAgC,EAAA9E,SAAA,CAAAiD,EAAAC,KACA,IAAAC,GAAA,EAEAF,EAAAlB,aACAoB,GAAA,GAGAA,GACA4B,EAAA1B,KAAAJ,MAIA8B,EAAAD,EAKA,IAAAE,EAAA,GAEAC,EAAAvG,eAAA0B,MAEA6E,EACAF,EAAA/E,SAAA,CAAAiD,EAAAC,KACA,IAEAgC,EAFA/B,GAAA,EAIAF,EAAAkC,YAAAnF,SAAA,SAAAC,GACAA,EAAAG,OAAA,gBAAAH,EAAAmF,WACAF,EAAAjF,EAAAG,MACAiF,cACAC,OAAAL,EAAAI,gBACA,IAAAH,IACA/B,GAAA,OAKA+B,EAAAjC,EAAAzB,KAAA6D,cAAAC,OAAAL,EAAAI,gBACA,IAAAH,IACA/B,GAAA,GAGAA,GACA6B,EAAA3B,KAAAJ,MAIA+B,EAAAD,EAIA7F,wBAAA,GAEA,IAAAqG,EAAA,GAEApG,iBAAAqG,uBAAAzE,SACAwE,EAAApG,iBAAAqG,wBAGA,IAAAD,EAAAxE,OACAiE,EAAAhF,SAAA,CAAAiD,EAAAC,KACA,IAAAC,GAAA,EAEAoC,EAAAvF,SAAAoD,IACAH,EAAAhC,kBAAAmC,IACAD,GAAA,MAIAA,GACAjE,wBAAAmE,KAAAJ,MAIA/D,wBAAA8F,EAGAzF,cAAAL,wBAAA6B,OAGAR,kBAAArB,wBAAA,EAAAM,eAEAiG,SAAAlG,eACAE,WAAA,GAOAiG,oBAAA,KACAC,eAAA3G,UAAA4G,IAAA,WAGAC,iBAAA,KACAC,YAAA/G,iBAAA,QAAAgH,iBAEAD,YAAA9G,UAAA4G,IAAA,WAIAI,kBAAA7G,IAkJA,GA5HAA,EAAA8G,iBACAhI,kBAAAe,UAAA4G,IAAA,YAMAlG,mBAAAqB,OAAA,IACArB,mBAAAwG,MAAA,SAAAC,EAAAC,GACA,OAAAD,EAAAE,cAAAD,MAEAE,UAAA,GAAA5G,mBAAAqB,OAAA,EACAhB,oBAAAuG,UASA5G,mBAAAM,SAAA,SAAAiD,GACA/E,YAAAkD,mBACA,YACA,kKAGA6B,YAAAA,aAAAA,kJAGAA,MAAAA,4DAQAtD,kBAAAoB,OAAA,IACApB,kBAAAuG,MAAA,SAAAC,EAAAC,GACA,OAAAD,EAAAE,cAAAD,MAEAE,UAAA,GAAA3G,kBAAAoB,OAAA,EAQApB,kBAAAK,SAAA,SAAAiD,GACA9E,WAAAiD,mBACA,YACA,kKAGA6B,YAAAA,aAAAA,kJAGAA,MAAAA,4DAOArD,kBAAAmB,OAAA,IACAnB,kBAAAsG,MAAA,SAAAC,EAAAC,GACA,OAAAD,EAAAE,cAAAD,MAEAE,UAAA,GAAA1G,kBAAAmB,OAAA,EAQAnB,kBAAAI,SAAA,SAAAiD,GACA7E,WAAAgD,mBACA,YACA,kKAGA6B,YAAAA,aAAAA,kJAGAA,MAAAA,4DAOApD,eAAAkB,OAAA,IACAlB,eAAAqG,MAAA,SAAAC,EAAAC,GACA,OAAAD,EAAAE,cAAAD,MAEAE,UAAA,GAAAzG,eAAAkB,OAAA,EAQAlB,eAAAG,SAAA,SAAAiD,GACA5E,QAAA+C,mBACA,YACA,kKAGA6B,YAAAA,aAAAA,kJAGAA,MAAAA,4DAOAT,QAAAC,IAAA3C,qBAEAyG,OAAAC,KAAA1G,qBAAAiB,OAAA,EAAA,CAWA,SAAA0F,EAAAN,EAAAC,GACA,OAAAD,EAAA1E,KAAA4E,cAAAD,EAAA3E,MAGA,IAAA,IAAAiF,KAAA5G,oBACAA,oBAAA4G,GAAAR,KAAAO,GAGA3G,oBAAAyG,OAAAC,KAAA1G,qBACAoG,OACAS,QAAA,CAAAC,EAAAF,KACAE,EAAAF,GAAA5G,oBAAA4G,GACAE,IACA,IAEA,IAAAC,EAAA,GACA,IAAA,IAAAH,KAAA5G,oBAKA+G,EAAAA,EAAAC,OAAAhH,oBAAA4G,IAGA,IAAAK,EAAA,GACAF,EAAA7G,SAAAiD,IACA8D,EAAA1D,KAAAJ,EAAAxB,SAGAsF,EAAAb,MAAA,SAAAC,EAAAC,GACA,OAAAD,EAAAE,cAAAD,MAGAW,EAAA/G,SAAA,SAAAiD,GACA3E,UAAA8C,mBACA,YACA,kKAGA6B,YAAAA,aAAAA,kJAGAA,MAAAA,6DAkBA+D,WAAAC,IACAC,eAAAlH,SAAAiD,IACAA,EAAAjE,UAAAmI,OAAA,aAEAF,EAAAjI,UAAA4G,IAAA,UACA,IAAAwB,EACA5H,cAAAgF,SAAAyC,EAAA/G,WAAAV,cACA6H,EAAA7H,cAAAgF,SAAAyC,EAAA/G,WAGAK,kBADAd,UACAP,wBACAI,gBADA8H,EAAAC,GAEAC,iBAAA9C,SAAAyC,EAAA/G,YAKA,SAAAqH,WACA,OAAA5C,KAAA6C,IACAvK,SAAAwK,KAAAC,YACAzK,SAAA0K,gBAAAD,YACAzK,SAAAwK,KAAAG,YACA3K,SAAA0K,gBAAAC,YACA3K,SAAA0K,gBAAAE,aAIA,SAAAC,YACA,OAAAnD,KAAA6C,IACAvK,SAAAwK,KAAAM,aACA9K,SAAA0K,gBAAAI,aACA9K,SAAAwK,KAAAO,aACA/K,SAAA0K,gBAAAK,aACA/K,SAAA0K,gBAAAM,cAIA,IAAAC,YAkBAC,kBAhBAZ,WAAA,MACAW,YAAA,GAEAX,YAAA,KAAAA,WAAA,MACAW,YAAA,GAEAX,WAAA,KAAAA,WAAA,MACAW,YAAA,IAEAX,WAAA,KAAAA,WAAA,OACAW,YAAA,IAEAX,WAAA,OACAW,YAAA,IAKA,MAAAzC,SAAAlG,IAGA,GAFA4I,kBAAAxD,KAAAyD,KAAA7I,EAAAC,eAEA2I,kBAAAD,YAAA,CAGA,IAFAlK,eAAA0C,kBAEA2H,EAAA,EAAAA,GAAAH,YAAAG,IACA,IAAAA,EACArK,eAAAoD,mBACA,YACA,4BAAAiH,WAGArK,eAAAoD,mBACA,YACA,qBAAAiH,WAIArK,eAAAoD,mBACA,YACA,+EAEAnE,SAAAC,cAAA,SACA6B,iBAAA,SAAA,KACAuJ,2BAEA,CAGA,IAFAtK,eAAA0C,kBAEA2H,EAAA,EAAAA,GAAAF,kBAAAE,IACA,IAAAA,EACArK,eAAAoD,mBACA,YACA,4BAAAiH,WAGArK,eAAAoD,mBACA,YACA,qBAAAiH,WAKArK,eAAAoD,mBACA,YACA,iDAIApD,eAAAoD,mBACA,aACA,iDAGA8F,eAAAjK,SAAA2B,iBAAA,SACAsI,eAAAlH,SAAAiD,IACAA,EAAAlE,iBAAA,SAAAwJ,IACAvB,WAAAuB,EAAAC,eAMAC,yBAAA,CAAAjI,EAAArB,KAEArB,kBAAA4C,kBAEA,IAAAgI,EAAAlI,EAAAqC,QAAA5C,GACAA,EAAA0I,UAKA,GAFAnG,QAAAC,IAAAiG,GAEAA,EAAA3H,OAAA,EA4BA,IA1BA5B,EAAAyJ,gBACAF,EAAAA,EAAA7F,QAAA5C,GACAA,EAAA6B,UAIA3C,EAAAwE,gBAAA5C,OAAA,GACA8H,cAAA1J,EAAAwE,gBAAA+E,EAAA,QAGAvJ,EAAAuD,eAAA3B,OAAA,GACA8H,cAAA1J,EAAAuD,eAAAgG,EAAA,WAGAvJ,EAAA2J,wBAAA/H,OAAA,GACA8H,cAAA1J,EAAA2J,wBAAAJ,EAAA,WAGAvJ,EAAA4E,qBAAAhD,OAAA,GACA8H,cAAA1J,EAAA4E,qBAAA2E,EAAA,QAGAvJ,EAAAqG,uBAAAzE,OAAA,GACA8H,cAAA1J,EAAAqG,uBAAAkD,EAAA,mBAGA/H,EAAAF,kBAAAE,EAAA,GAAAA,IACA,GAAA+H,EAAA/H,GAAA,CACA,IAAAC,EAAA,GACAC,EAAA,GAEA,OAAA6H,EAAA/H,GAAAM,kBACAL,EAAA,YACAC,EAAA,WAEA,OAAA6H,EAAA/H,GAAAM,kBACAL,EAAA,YACAC,EAAA,WAEA,QAAA6H,EAAA/H,GAAAM,kBACAL,EAAA,aACAC,EAAA,YAGA,IAAAK,EAAA,GAEAwH,EAAA/H,GAAAQ,SACAuH,EAAA/H,GAAAQ,QAAAnB,SAAA,SAAAC,GACAiB,EACAA,EAAA,MAAAjB,EAAA,UAIAnC,kBAAAsD,mBACA,YACA,YACAsH,EAAA/H,GAAAU,2CACAT,wIAIA8H,EAAA/H,GAAAW,kJAIAoH,EAAA/H,GAAAY,QACAmH,EAAA/H,GAAAY,QACA,0DAEAV,MACA6H,EAAA/H,GAAAa,mQASAkH,EAAA/H,GAAAc,sGAIAiH,EAAA/H,GAAAmB,OACA,mCACA,+BAGA4G,EAAA/H,GAAAoB,WACA,2CACA,+BAGA2G,EAAA/H,GAAAe,QACA,wBACAgH,EAAA/H,GAAAe,QACA,SACA,+BAGAgH,EAAA/H,GAAAgB,aACA+G,EAAA/H,GAAAiB,YACA8G,EAAA/H,GAAAkB,SACA,uBACA6G,EAAA/H,GAAAiB,WACA,MACA8G,EAAA/H,GAAAkB,SACA,SAEA,2DAEAX,ygBAwBA6H,kBAAAxJ,IACAyJ,UAAA9I,UAAA,cAAAX,aACAA,EAGA0J,aAAAjK,UAAAmI,OAAA,UAFA8B,aAAAjK,UAAA4G,IAAA,WAOAsD,qBAAA,CACA3H,EACAJ,EACAO,EACAJ,EACAK,EACAC,EACAC,EACAsH,EACA1H,EACAwC,EACAC,MAGA,IAAAxE,mBAAAsB,QAAAO,SAAA6H,IAAA7H,IACApC,iBAAAuD,eAAA3B,QACA,IAAA5B,iBAAAuD,eAAA1B,QAAAO,IACA7B,mBAAA2D,KAAA9B,GAGA7B,mBAAA2D,KAAA9B,IAKAJ,GACAA,EAAAnB,SAAA,SAAAC,IACA,IAAAN,kBAAAqB,QAAAf,IACAN,kBAAA0D,KAAApD,OAKA,IAAAL,kBAAAoB,QAAAU,SAAA0H,IAAA1H,GACA9B,kBAAAyD,KAAA3B,IAGA,IAAA7B,eAAAmB,QAAAM,KAEAnC,iBAAAwE,gBAAA5C,QACA,IAAA5B,iBAAAwE,gBAAA3C,QAAAM,IACAzB,eAAAwD,KAAA/B,GAGAzB,eAAAwD,KAAA/B,IAaAnC,iBAAA2J,wBAAA/H,QAEA,IAAA5B,iBAAA2J,wBAAA9H,QAAAmI,KACArJ,oBAAAqJ,IAIA,IAFArJ,oBAAAqJ,GAAAE,WACAC,GAAAA,EAAA7H,OAAAA,MAGAtC,iBAAA4E,qBAAAhD,QACA,IAAA5B,iBAAA4E,qBAAA/C,QAAAS,IACA3B,oBAAAqJ,GAAA9F,KAAA,CACA5B,KAAAA,EACAwC,KAAAA,EACAC,MAAAA,IAIApE,oBAAAqJ,GAAA9F,KAAA,CACA5B,KAAAA,EACAwC,KAAAA,EACAC,MAAAA,MAKApE,oBAAAqJ,GAAA,GACAhK,iBAAA4E,qBAAAhD,QACA,IAAA5B,iBAAA4E,qBAAA/C,QAAAS,IACA3B,oBAAAqJ,GAAA9F,KAAA,CACA5B,KAAAA,EACAwC,KAAAA,EACAC,MAAAA,IAIApE,oBAAAqJ,GAAA9F,KAAA,CACA5B,KAAAA,EACAwC,KAAAA,EACAC,MAAAA,MAQApE,oBAAAqJ,IAIA,IAFArJ,oBAAAqJ,GAAAE,WACAC,GAAAA,EAAA7H,OAAAA,KAGA3B,oBAAAqJ,GAAA9F,KAAA,CACA5B,KAAAA,EACAwC,KAAAA,EACAC,MAAAA,KAIApE,oBAAAqJ,GAAA,GACArJ,oBAAAqJ,GAAA9F,KAAA,CACA5B,KAAAA,EACAwC,KAAAA,EACAC,MAAAA,MAOAqF,WAAAlK,IACAA,EAAAW,SAAAiD,IAjIA,IACA1B,EACAJ,EACAO,EACAJ,EAIA6H,EACA1H,EACAwC,EACAC,EAuHAjB,EAAAuG,QAAAC,eACAC,kBAAAC,KAAAC,MAAA3G,EAAAuG,QAAAC,eAGAnK,gBAAA+D,KAAA,CACAhC,IAAA4B,EAAA5B,IACAG,KAAAyB,EAAA4G,OAAArI,KACAD,QAAA0B,EAAAuG,QAAAM,SACAxI,KAAA2B,EAAA4G,OAAAE,SACArI,QAAAuB,EAAAuG,QAAAQ,SACArI,YAAA6C,SAAAvB,EAAAuG,QAAAS,kBACArI,WAAA4C,SAAAvB,EAAAuG,QAAAU,+BACArI,SAAA2C,SAAAvB,EAAAuG,QAAAW,+BACArI,OAAAmB,EAAAuG,QAAA1H,OACAC,WAAAkB,EAAAuG,QAAAY,WACAnJ,gBAAAgC,EAAAuG,QAAAa,mBACAlJ,QAAA8B,EAAAuG,QAAAc,oBACAnB,QAAAO,kBAAAP,QACA1H,KAAAiI,kBAAAa,SACAtG,KAAAuG,WAAAd,kBAAAe,UACAvG,MAAAsG,WAAAd,kBAAAgB,WACAvF,YAAAlC,EAAA4G,OAAAc,OACAhC,QAAA1F,EAAA0F,UAvJApH,EA2JA0B,EAAAuG,QAAAM,SA1JA3I,EA2JA8B,EAAAuG,QAAAc,oBA1JA5I,EA2JAuB,EAAAuG,QAAAQ,SA1JA1I,EA2JA2B,EAAA4G,OAAAE,SACAvF,SAAAvB,EAAAuG,QAAAS,kBACAzF,SAAAvB,EAAAuG,QAAAU,+BACA1F,SAAAvB,EAAAuG,QAAAW,+BA1JAhB,EA2JAO,kBAAAP,QA1JA1H,EA2JAiI,kBAAAa,SA1JAtG,EA2JAuG,WAAAd,kBAAAe,UA1JAvG,EA2JAsG,WAAAd,kBAAAgB,YAxJA,IAAAhL,mBAAAsB,QAAAO,SAAA6H,IAAA7H,IACApC,iBAAAuD,eAAA3B,QACA,IAAA5B,iBAAAuD,eAAA1B,QAAAO,IACA7B,mBAAA2D,KAAA9B,GAGA7B,mBAAA2D,KAAA9B,IAKAJ,GACAA,EAAAnB,SAAA,SAAAC,IACA,IAAAN,kBAAAqB,QAAAf,IACAN,kBAAA0D,KAAApD,OAKA,IAAAL,kBAAAoB,QAAAU,SAAA0H,IAAA1H,GACA9B,kBAAAyD,KAAA3B,IAGA,IAAA7B,eAAAmB,QAAAM,KAEAnC,iBAAAwE,gBAAA5C,QACA,IAAA5B,iBAAAwE,gBAAA3C,QAAAM,IACAzB,eAAAwD,KAAA/B,GAGAzB,eAAAwD,KAAA/B,IAaAnC,iBAAA2J,wBAAA/H,QAEA,IAAA5B,iBAAA2J,wBAAA9H,QAAAmI,KACArJ,oBAAAqJ,IAIA,IAFArJ,oBAAAqJ,GAAAE,WACAC,GAAAA,EAAA7H,OAAAA,MAGAtC,iBAAA4E,qBAAAhD,QACA,IAAA5B,iBAAA4E,qBAAA/C,QAAAS,IACA3B,oBAAAqJ,GAAA9F,KAAA,CACA5B,KAAAA,EACAwC,KAAAA,EACAC,MAAAA,IAIApE,oBAAAqJ,GAAA9F,KAAA,CACA5B,KAAAA,EACAwC,KAAAA,EACAC,MAAAA,MAKApE,oBAAAqJ,GAAA,GACAhK,iBAAA4E,qBAAAhD,QACA,IAAA5B,iBAAA4E,qBAAA/C,QAAAS,IACA3B,oBAAAqJ,GAAA9F,KAAA,CACA5B,KAAAA,EACAwC,KAAAA,EACAC,MAAAA,IAIApE,oBAAAqJ,GAAA9F,KAAA,CACA5B,KAAAA,EACAwC,KAAAA,EACAC,MAAAA,MAQApE,oBAAAqJ,IAIA,IAFArJ,oBAAAqJ,GAAAE,WACAC,GAAAA,EAAA7H,OAAAA,KAGA3B,oBAAAqJ,GAAA9F,KAAA,CACA5B,KAAAA,EACAwC,KAAAA,EACAC,MAAAA,KAIApE,oBAAAqJ,GAAA,GACArJ,oBAAAqJ,GAAA9F,KAAA,CACA5B,KAAAA,EACAwC,KAAAA,EACAC,MAAAA,SAmDA0G,OAAAxL,GACAyL,MACA,8DACA,CACAC,KAAA,OACAC,QAAA,CACA,eAAA,mBACA,sBAAA,MACA,yBAAA3L,EACA,iBAAA,2CAQA4L,UAAA,CAAAC,EAAA9L,KACA8L,EAAAlK,OAAA,GACA1B,YAAAA,YAAAyH,OAAAmE,GACA7L,UACAoD,QAAAC,IAAA,cAAApD,aACA6L,wBAAA9L,QAAAD,KAEAoK,WAAAlK,aACAmD,QAAAC,IAAA,kBAAAnD,iBACAC,cAAAF,YAAA0B,OACAyB,QAAAC,IAAA,gBAAAlD,eAEAkJ,yBAAAnJ,gBAAAH,GACAsG,SAAAlG,eACAyG,kBAAA7G,GAGA6C,+BAMAmJ,eAAAD,wBAAA9L,EAAAD,GACA,MAAAiM,QAAAR,OAAAxL,GACA6L,QAAAG,EAAAC,OACAL,UAAAC,EAAA9L,GAIA,MAAAmM,gBAAA,IACAT,MAAA,wBAIAM,eAAAI,mBACA,IACA,MAAAH,QANAP,MAAA,wBAOA1L,uBAAAiM,EAAAC,OACA7I,QAAAC,IAAA,mBAAAtD,kBACA+L,wBAAA9L,QAAAD,kBACA,MAAAoJ,GACA/F,QAAAgJ,MAAAjD,GACA2C,wBAAA9L,UAIAmM,mBAGAxN,iBAAAgB,iBAAA,UAAAwJ,IACA/I,cAAAgF,SAAA+D,EAAAC,OAAApI,OAGAG,kBADAd,UACAP,wBACAI,gBADA,EAAAE,eAEAiG,SAAAlG,kBAMAT,UAAAC,iBAAA,QAAAiD","file":"all.min.js","sourcesContent":["const cityListBtnLoc = document.querySelector(\".city .arrow-down\");\r\nconst cityListLoc = document.querySelector(\".city .list\");\r\nconst distanceListBtnLoc = document.querySelector(\".distance .arrow-down\");\r\nconst distanceListLoc = document.querySelector(\".distance .list\");\r\nconst sectorListBtnLoc = document.querySelector(\".sector .arrow-down\");\r\nconst sectorListLoc = document.querySelector(\".sector .list\");\r\nconst employmentFormListBtnLoc = document.querySelector(\".employment-form .arrow-down\");\r\nconst employmentFormListLoc = document.querySelector(\".employment-form .list\");\r\nconst workingHoursListBtnLoc = document.querySelector(\".working-hours .arrow-down\");\r\nconst workingHoursListLoc = document.querySelector(\".working-hours .list\");\r\nconst languageListBtnLoc = document.querySelector(\".language .arrow-down\");\r\nconst languageListLoc = document.querySelector(\".language .list\");\r\n\r\nconst awardedResultsLoc = document.querySelector(\".awarded\");\r\nconst recordsOnPageLoc = document.querySelector(\".records-on-page\");\r\nconst pagesSwitchLoc = document.querySelector(\".pages\");\r\n\r\nconst brancheWrapperLoc = document.querySelector(\".sector\");\r\nconst branchesLoc = document.querySelector(\".sector ul\");\r\nconst jobFormLoc = document.querySelector(\".employment-form ul\"); \r\nconst jobTypeLoc = document.querySelector(\".working-hours ul\"); \r\nconst langLoc = document.querySelector(\".language ul\");\r\nconst citiesLoc = document.querySelector(\".city ul\");\r\nconst resultsLoc = document.querySelector(\".results\");\r\n\r\nconst remoteLoc = document.querySelector(\"#remote\");\r\nconst relocationLoc = document.querySelector(\"#relocation\");\r\nconst searchInputLoc = document.querySelector(\".job input\");\r\n\r\nconst distanceInputsLoc = document.querySelectorAll(\".distance input\");\r\nconst distanceTitleLoc = document.querySelector(\".distance .list-title\");\r\n\r\nconst searchBtn = document.querySelector(\".search-btn\");\r\n\r\ncityListBtnLoc.addEventListener(\"click\", () => {\r\n    cityListLoc.classList.toggle(\"expand\");\r\n})\r\n\r\ndistanceListBtnLoc.addEventListener(\"click\", () => {\r\n    distanceListLoc.classList.toggle(\"expand\");\r\n})\r\n\r\nsectorListBtnLoc.addEventListener(\"click\", () => {\r\n    sectorListLoc.classList.toggle(\"expand\");\r\n})\r\n\r\nemploymentFormListBtnLoc.addEventListener(\"click\", () => {\r\n    employmentFormListLoc.classList.toggle(\"expand\");\r\n})\r\n\r\nworkingHoursListBtnLoc.addEventListener(\"click\", () => {\r\n    workingHoursListLoc.classList.toggle(\"expand\");\r\n})\r\n\r\nlanguageListBtnLoc.addEventListener(\"click\", () => {\r\n    languageListLoc.classList.toggle(\"expand\");\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet filterConfigData = {};\r\nlet apiPage = 1;\r\nlet rawAPIArray = [];\r\nlet allRecordsArray = [];\r\nlet recordsNumber = 0;\r\nlet recordsOnPage = 20;\r\nlet filtersON = false;\r\nlet filterBranchesList = [];\r\nlet filterJobFormList = [];\r\nlet filterJobTypeList = [];\r\nlet filterLangList = [];\r\nlet filterCountriesList = {};\r\nlet filterListMaxHeight = 0;\r\nlet filteredRecordsArray_11;\r\n\r\n\r\n// change distance label after choose\r\ndistanceInputsLoc.forEach((elem) => {\r\n    elem.addEventListener(\"change\", () => {\r\n        distanceTitleLoc.innerText = `+${Number(elem.value)} km`;\r\n        distanceTitleLoc.dataset.distance = Number(elem.value);\r\n    })\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nrecordsOnPageLoc.value = recordsOnPage;\r\n\r\n// create RECORDS BOXES ///////////////////////////////////////////////\r\nconst createRecordBoxes = (recordsArray, firstRecordNumber, recordsOnPage) => {\r\n    resultsLoc.replaceChildren();\r\n\r\n    for (i = firstRecordNumber; i < recordsOnPage; i++) {\r\n        // colouring of records by type of recruitment\r\n\r\n        if (recordsArray[i]) {\r\n            let borderColorClass = \"\";\r\n            let textColorClass = \"\";\r\n\r\n            if (!filterConfigData.recruitmentType_colorOnly.length) {\r\n                if (recordsArray[i].recruitmentType === \"PT\") {\r\n                    borderColorClass = \"pt-border\";\r\n                    textColorClass = \"pt-text\";\r\n                }\r\n                if (recordsArray[i].recruitmentType === \"RS\") {\r\n                    borderColorClass = \"rs-border\";\r\n                    textColorClass = \"rs-text\";\r\n                }\r\n                if (recordsArray[i].recruitmentType === \"WEW\") {\r\n                    borderColorClass = \"wew-border\";\r\n                    textColorClass = \"wew-text\";\r\n                }\r\n            } else {\r\n                if (\r\n                    filterConfigData.recruitmentType_colorOnly.indexOf(\"PT\") !==\r\n                    -1\r\n                ) {\r\n                    if (recordsArray[i].recruitmentType === \"PT\") {\r\n                        borderColorClass = \"pt-border\";\r\n                        textColorClass = \"pt-text\";\r\n                    }\r\n                }\r\n\r\n                if (\r\n                    filterConfigData.recruitmentType_colorOnly.indexOf(\"RS\") !==\r\n                    -1\r\n                ) {\r\n                    if (recordsArray[i].recruitmentType === \"RS\") {\r\n                        borderColorClass = \"rs-border\";\r\n                        textColorClass = \"rs-text\";\r\n                    }\r\n                }\r\n\r\n                if (\r\n                    filterConfigData.recruitmentType_colorOnly.indexOf(\r\n                        \"WEW\"\r\n                    ) !== -1\r\n                ) {\r\n                    if (recordsArray[i].recruitmentType === \"WEW\") {\r\n                        borderColorClass = \"wew-border\";\r\n                        textColorClass = \"wew-text\";\r\n                    }\r\n                }\r\n            }\r\n\r\n            let formaZatrudnienia = \"\";\r\n\r\n            if (recordsArray[i].jobForm) {\r\n                recordsArray[i].jobForm.forEach(function (elem) {\r\n                    formaZatrudnienia =\r\n                        formaZatrudnienia + \"<p>\" + elem + \"</p>\";\r\n                });\r\n            }\r\n\r\n            resultsLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<a href=\"${\r\n                    recordsArray[i].url\r\n                }\" target=\"_blank\"><div class=\"result ${borderColorClass}\">\r\n            <div class=\"top\">\r\n              \r\n                    <div class=\"lang\"><p>${recordsArray[i].lang}</p></div>\r\n                    <div class=\"branche-name\">\r\n                        <div class=\"branche\">${\r\n                            recordsArray[i].branche\r\n                                ? recordsArray[i].branche\r\n                                : \"\"\r\n                        }</div>\r\n                        <div class=\"name ${textColorClass}\">${\r\n                    recordsArray[i].name\r\n                }</div>\r\n                   \r\n                </div>\r\n              \r\n            </div>\r\n\r\n            <div class=\"bottom\">\r\n                <div class=\"city-container\">\r\n                    <div class=\"city\"><img src=\"./img/location_dot.svg\">${\r\n                        recordsArray[i].city\r\n                    }</div>\r\n                    </div>\r\n                    <div class=\"details-container\">\r\n                    ${\r\n                        recordsArray[i].jobType\r\n                            ? \"<div class='jobtype'>\" +\r\n                              recordsArray[i].jobType +\r\n                              \"</div>\"\r\n                            : \"\"\r\n                    }\r\n                    ${\r\n                        recordsArray[i].visibleRate\r\n                            ? recordsArray[i].salaryFrom &&\r\n                              recordsArray[i].salaryTo\r\n                                ? \"<div class='salary'>\" +\r\n                                  recordsArray[i].salaryFrom +\r\n                                  \" - \" +\r\n                                  recordsArray[i].salaryTo +\r\n                                  \"</div>\"\r\n                                : \"\"\r\n                            : \"\"\r\n                    }\r\n                    ${\r\n                        recordsArray[i].remote\r\n                            ? \"<div class='remote'>zdalna</div>\"\r\n                            : \"\"\r\n                    }\r\n                    ${\r\n                        recordsArray[i].relocation\r\n                            ? \"<div class='relocation'>relocation</div>\"\r\n                            : \"\"\r\n                    }\r\n                    <div class=\"employmentform\">${formaZatrudnienia}</div>\r\n                    </div>\r\n                </div>\r\n                   \r\n                </div>\r\n          \r\n\r\n        </div></a>`\r\n            );\r\n        }\r\n    }\r\n};\r\n\r\n// filter the data to create FILTERED OBJECTS ARRAY ///////////////////////////////\r\nconst createFilteredRecordsArray = () => {\r\n    const branchesChildrenLoc = branchesLoc.querySelectorAll(\"li input\");\r\n    const jobFormChildrenLoc = jobFormLoc.querySelectorAll(\"li input\");\r\n    const jobTypeChildrenLoc = jobTypeLoc.querySelectorAll(\"li input\");\r\n    const langChildrenLoc = langLoc.querySelectorAll(\"li input\");\r\n    // const countriesChildrenLoc = document.querySelectorAll(\".countries option\");\r\n    const citiesChildrenLoc = citiesLoc.querySelectorAll(\"li input\");\r\n\r\n    let filteredRecordsArray = allRecordsArray;\r\n\r\n    // selectedBranches ////////////////\r\n\r\n    let selectedBranches = [];\r\n\r\n    console.log(branchesChildrenLoc)\r\n\r\n    if (filterConfigData.branche_filter.length) {\r\n        selectedBranches = filterConfigData.branche_filter;\r\n    } else {\r\n        selectedBranches = Array.from(branchesChildrenLoc)\r\n            .filter(function (elem) {\r\n                return elem.checked;\r\n            })\r\n            .map(function (elem) {\r\n                return elem.value;\r\n            });\r\n    }\r\n\r\n    console.log(selectedBranches)\r\n\r\n    let filteredRecordsArray_1 = [];\r\n\r\n    if (selectedBranches.length !== 0) {\r\n        filteredRecordsArray.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            selectedBranches.forEach((selectedFiltr) => {\r\n                if (el.branche === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_1.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_1 = filteredRecordsArray;\r\n    }\r\n\r\n    console.log(\"filteredRecordsArray_1\", filteredRecordsArray_1)\r\n\r\n    // selectedJobForms ////////////////\r\n\r\n    let selectedJobForms = [];\r\n\r\n    console.log(jobFormChildrenLoc)\r\n\r\n    selectedJobForms = Array.from(jobFormChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.checked;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n        console.log(selectedJobForms)\r\n\r\n    let filteredRecordsArray_2 = [];\r\n\r\n    if (selectedJobForms.length !== 0) {\r\n        filteredRecordsArray_1.forEach((el, index) => {\r\n            if (el.jobForm) {\r\n                let addFlag = false;\r\n\r\n                selectedJobForms.forEach((selectedFiltr) => {\r\n                    if (el.jobForm.indexOf(selectedFiltr) !== -1) {\r\n                        addFlag = true;\r\n                    }\r\n                });\r\n\r\n                if (addFlag) {\r\n                    filteredRecordsArray_2.push(el);\r\n                }\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_2 = filteredRecordsArray_1;\r\n    }\r\n\r\n    console.log(\"filteredRecordsArray_2\", filteredRecordsArray_2)\r\n\r\n    // selectedJobTypes ////////////////\r\n\r\n    let selectedjobTypes = Array.from(jobTypeChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.checked;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let filteredRecordsArray_3 = [];\r\n\r\n    if (selectedjobTypes.length !== 0) {\r\n        filteredRecordsArray_2.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            selectedjobTypes.forEach((selectedFiltr) => {\r\n                if (el.jobType === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_3.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_3 = filteredRecordsArray_2;\r\n    }\r\n\r\n    // selectedLangs ////////////////\r\n    let selectedLangs = [];\r\n\r\n    if (\r\n        filterConfigData.language_filter.length \r\n    ) {\r\n        selectedLangs = filterConfigData.language_filter;\r\n    } else {\r\n        selectedLangs = Array.from(langChildrenLoc)\r\n            .filter(function (elem) {\r\n                return elem.checked;\r\n            })\r\n            .map(function (elem) {\r\n                return elem.value;\r\n            });\r\n    }\r\n\r\n    let filteredRecordsArray_4 = [];\r\n\r\n    if (selectedLangs.length !== 0) {\r\n        filteredRecordsArray_3.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            selectedLangs.forEach((selectedFiltr) => {\r\n                if (el.lang === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_4.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_4 = filteredRecordsArray_3;\r\n    }\r\n\r\n    // // selectedSalary ////////////////\r\n\r\n    // let selectedValOne;\r\n    // let selectedValTwo;\r\n    // if (salaryMarkLoc.checked) {\r\n    //     selectedValOne = parseInt(displayValOne.innerText);\r\n    //     selectedValTwo = parseInt(displayValTwo.innerText);\r\n    // }\r\n\r\n    // let filteredRecordsArray_5 = [];\r\n\r\n    // if (salaryMarkLoc.checked) {\r\n    //     filteredRecordsArray_4.forEach((el, index) => {\r\n    //         let addFlag = false;\r\n\r\n    //         if (el.visibleRate) {\r\n    //             if (el.salaryTo && el.salaryFrom) {\r\n    //                 if (\r\n    //                     el.salaryTo >= selectedValOne &&\r\n    //                     el.salaryFrom <= selectedValTwo\r\n    //                 ) {\r\n    //                     addFlag = true;\r\n    //                 }\r\n    //             }\r\n    //             if (el.salaryTo && !el.salaryFrom) {\r\n    //                 if (el.salaryTo >= selectedValOne) {\r\n    //                     addFlag = true;\r\n    //                 }\r\n    //             }\r\n    //             if (!el.salaryTo && el.salaryFrom) {\r\n    //                 if (el.salaryFrom <= selectedValTwo) {\r\n    //                     addFlag = true;\r\n    //                 }\r\n    //             }\r\n    //         }\r\n\r\n    //         if (addFlag) {\r\n    //             filteredRecordsArray_5.push(el);\r\n    //         }\r\n    //     });\r\n    // } else {\r\n    //     filteredRecordsArray_5 = filteredRecordsArray_4;\r\n    // }\r\n\r\n    // // selectedCountry ////////////////\r\n\r\n    // let selectedCountry = [];\r\n\r\n    // if (\r\n    //     filterConfigData.location_country_filter.length \r\n    //     // && !filterConfigData.location_visible\r\n    // ) {\r\n    //     selectedCountry = filterConfigData.location_country_filter;\r\n    // } else {\r\n    //     if (locationMarkLoc.checked) {\r\n    //         selectedCountry = Array.from(countriesChildrenLoc)\r\n    //             .filter(function (elem) {\r\n    //                 if (elem.value) {\r\n    //                     return elem.selected;\r\n    //                 }\r\n    //             })\r\n    //             .map(function (elem) {\r\n    //                 if (elem.value) {\r\n    //                     return elem.value;\r\n    //                 }\r\n    //             });\r\n    //     }\r\n    // }\r\n\r\n    // let filteredRecordsArray_6 = [];\r\n\r\n    // if (\r\n    //     locationMarkLoc.checked ||\r\n    //     (filterConfigData.location_country_filter.length \r\n    //         // && !filterConfigData.location_visible\r\n    //         )\r\n    // ) {\r\n    //     if (selectedCountry.length) {\r\n    //         filteredRecordsArray_5.forEach((el, index) => {\r\n    //             let addFlag = false;\r\n\r\n    //             selectedCountry.forEach((selectedFiltr) => {\r\n    //                 if (el.country === selectedFiltr) {\r\n    //                     addFlag = true;\r\n    //                 }\r\n    //             });\r\n\r\n    //             if (addFlag) {\r\n    //                 filteredRecordsArray_6.push(el);\r\n    //             }\r\n    //         });\r\n    //     } else {\r\n    //         filteredRecordsArray_6 = filteredRecordsArray_5;\r\n    //     }\r\n    // } else {\r\n    //     filteredRecordsArray_6 = filteredRecordsArray_5;\r\n    // }\r\n\r\n    let filteredRecordsArray_6 = filteredRecordsArray_4;\r\n\r\n    // selectedCity & selectedDistance ////////////////\r\n    let selectedCity = [];\r\n\r\n    if (filterConfigData.location_city_filter.length) {\r\n        selectedCity = filterConfigData.location_city_filter;\r\n    } else {\r\n\r\n        selectedCity = Array.from(citiesChildrenLoc)\r\n            .filter(function (elem) {\r\n                if (elem.value) {\r\n                    return elem.checked;\r\n                }\r\n            })\r\n            .map(function (elem) {\r\n                if (elem.value) {\r\n                    return elem.value;\r\n                }\r\n            });\r\n\r\n        console.log(selectedCity)\r\n        console.log(filteredRecordsArray_6)\r\n\r\n    }\r\n\r\n    let filteredRecordsArray_7 = [];\r\n\r\n    if (selectedCity.length) {\r\n        \r\n        let selectedDistance = parseInt(distanceTitleLoc.dataset.distance);\r\n\r\n        console.log(selectedDistance)\r\n\r\n        let lati;\r\n        let longi;\r\n        let min_lati;\r\n        let max_lati;\r\n        let min_longi;\r\n        let max_longi;\r\n\r\n        selectedCity.forEach((el_city) => {\r\n            filteredRecordsArray_6.forEach((el_record, index) => {\r\n                if (el_city === el_record.city) {\r\n\r\n                    lati = el_record.lati;\r\n                    longi = el_record.longi;\r\n\r\n                    min_lati = lati - selectedDistance * 0.009044;\r\n                    max_lati = lati + selectedDistance * 0.009044;\r\n                    min_longi = longi - (selectedDistance * 0.0089831) / Math.cos((lati * Math.PI) / 180);\r\n                    max_longi = longi + (selectedDistance * 0.0089831) / Math.cos((lati * Math.PI) / 180);\r\n                }\r\n            });\r\n\r\n            filteredRecordsArray_6.forEach((el_record, index) => {\r\n                if (\r\n                    el_record.lati <= max_lati &&\r\n                    el_record.lati >= min_lati &&\r\n                    el_record.longi <= max_longi &&\r\n                    el_record.longi >= min_longi\r\n                ) {\r\n                    filteredRecordsArray_7.push(el_record);\r\n                }\r\n            })\r\n        })\r\n        \r\n    } else {\r\n        filteredRecordsArray_7 = filteredRecordsArray_6;\r\n    }\r\n   \r\n    // selectedRemote ////////////////\r\n\r\n    let filteredRecordsArray_8 = [];\r\n\r\n    if (remoteLoc.checked || (filterConfigData.remote_filter)) {\r\n        filteredRecordsArray_7.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            if (el.remote) {\r\n                addFlag = true;\r\n            }\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_8.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_8 = filteredRecordsArray_7;\r\n    }\r\n\r\n    // selectedRelocation ////////////////\r\n\r\n    let filteredRecordsArray_9 = [];\r\n\r\n    if (relocationLoc.checked) {\r\n        filteredRecordsArray_8.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            if (el.relocation) {\r\n                addFlag = true;\r\n            }\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_9.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_9 = filteredRecordsArray_8;\r\n    }\r\n\r\n    // searchText ////////////////\r\n\r\n    let filteredRecordsArray_10 = [];\r\n\r\n    let searchText = searchInputLoc.value;\r\n\r\n    if (searchText) {\r\n        filteredRecordsArray_9.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            let position;\r\n\r\n            el.description.forEach(function (elem) {\r\n                if (elem.value && elem.field_id !== \"geolocation\") {\r\n                    position = elem.value\r\n                        .toLowerCase()\r\n                        .search(searchText.toLowerCase());\r\n                    if (position !== -1) {\r\n                        addFlag = true;\r\n                    }\r\n                }\r\n            });\r\n\r\n            position = el.name.toLowerCase().search(searchText.toLowerCase());\r\n            if (position !== -1) {\r\n                addFlag = true;\r\n            }\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_10.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_10 = filteredRecordsArray_9;\r\n    }\r\n\r\n    // selectedRecruitmentType (coloring of records) ////////////////\r\n    filteredRecordsArray_11 = [];\r\n    \r\n    let selectedRecruitmentType = [];\r\n\r\n    if (filterConfigData.recruitmentType_filter.length) {\r\n        selectedRecruitmentType = filterConfigData.recruitmentType_filter;\r\n    }\r\n\r\n    if (selectedRecruitmentType.length !== 0) {\r\n        filteredRecordsArray_10.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            selectedRecruitmentType.forEach((selectedFiltr) => {\r\n                if (el.recruitmentType === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_11.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_11 = filteredRecordsArray_10;\r\n    }\r\n\r\n    recordsNumber = filteredRecordsArray_11.length;\r\n\r\n    // summariseDownload(recordsNumber);\r\n    createRecordBoxes(filteredRecordsArray_11, 0, recordsOnPage);\r\n  \r\n    setPages(recordsNumber);\r\n    filtersON = true;\r\n    // hideFilter();\r\n    \r\n    // setTimeout(setParentIframeHeight, 1000);\r\n    \r\n};\r\n\r\nconst pagesContainerStart = () => {\r\n    pagesContainer.classList.add(\"active\");\r\n};\r\n\r\nconst dropDownBtnStart = () => {\r\n    dropDownLoc.addEventListener(\"click\", showHideFilters);\r\n\r\n    dropDownLoc.classList.add(\"active\");\r\n};\r\n\r\n// create HTML FILTERS LISTS //////////////////////////////////////////////////////\r\nconst createFilterLists = (filterConfigData) => {\r\n\r\n    // if (!filterConfigData.salary_visible) {\r\n    //     salaryLoc.classList.add(\"unactive\");\r\n    // }\r\n\r\n    // if (!filterConfigData.relocation_visible) {\r\n    //     relocationWrapperLoc.classList.add(\"unactive\");\r\n    // }\r\n\r\n    // if (!filterConfigData.language_visible) {\r\n    //     langWrapperLoc.classList.add(\"unactive\");\r\n    // }\r\n\r\n    // if (!filterConfigData.remote_visible) {\r\n    //     remoteWrapperLoc.classList.add(\"unactive\");\r\n    // }\r\n\r\n    // if (!filterConfigData.location_visible) {\r\n    //     locWrapperLoc.classList.add(\"unactive\");\r\n    // }\r\n\r\n    if (!filterConfigData.branche_visible) {\r\n        brancheWrapperLoc.classList.add(\"unactive\");\r\n    }\r\n\r\n    // let isSamsungBrowser = navigator.userAgent.match(/SamsungBrowser/i);\r\n    // let isChromeBrowser = navigator.userAgent.match(/Chrome/i);\r\n\r\n    if (filterBranchesList.length > 0) {\r\n        filterBranchesList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n        rowHeight = filterBranchesList.length * 21 + 3;\r\n        filterListMaxHeight = rowHeight;\r\n        // if (getMobileOperatingSystem() === \"unknown\") {\r\n            // brancheListLoc.style.height = String(rowHeight) + \"px\";\r\n        // } else if (isSamsungBrowser || isChromeBrowser) {\r\n        //     branchesLoc.style.height = \"50px\";\r\n        // } else {\r\n        //     branchesLoc.style.height = String(rowHeight) + \"px\";\r\n        // }\r\n        \r\n        filterBranchesList.forEach(function (el) {\r\n            branchesLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${el}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${el}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n            \r\n        });\r\n    }\r\n\r\n    if (filterJobFormList.length > 0) {\r\n        filterJobFormList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n        rowHeight = filterJobFormList.length * 21 + 3;\r\n        // if (getMobileOperatingSystem() === \"unknown\") {\r\n            // jobFormLoc.style.height = String(rowHeight) + \"px\";\r\n        // } else if (isSamsungBrowser || isChromeBrowser) {\r\n        //     jobFormLoc.style.height = \"50px\";\r\n        // } else {\r\n        //     jobFormLoc.style.height = String(rowHeight) + \"px\";\r\n        // }\r\n        filterJobFormList.forEach(function (el) {\r\n            jobFormLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${el}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${el}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (filterJobTypeList.length > 0) {\r\n        filterJobTypeList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n        rowHeight = filterJobTypeList.length * 21 + 3;\r\n        // if (getMobileOperatingSystem() === \"unknown\") {\r\n            // jobTypeLoc.style.height = String(rowHeight) + \"px\";\r\n        // } else if (isSamsungBrowser || isChromeBrowser) {\r\n        //     jobTypeLoc.style.height = \"50px\";\r\n        // } else {\r\n        //     jobTypeLoc.style.height = String(rowHeight) + \"px\";\r\n        // }\r\n        filterJobTypeList.forEach(function (el) {\r\n            jobTypeLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${el}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${el}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (filterLangList.length > 0) {\r\n        filterLangList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n        rowHeight = filterLangList.length * 21 + 3;\r\n        // if (getMobileOperatingSystem() === \"unknown\") {\r\n            // langLoc.style.height = String(rowHeight) + \"px\";\r\n        // } else if (isSamsungBrowser || isChromeBrowser) {\r\n        //     langLoc.style.height = \"50px\";\r\n        // } else {\r\n        //     langLoc.style.height = String(rowHeight) + \"px\";\r\n        // }\r\n        filterLangList.forEach(function (el) {\r\n            langLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${el}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${el}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n        });\r\n    }\r\n\r\n    console.log(filterCountriesList);\r\n\r\n    if (Object.keys(filterCountriesList).length > 0) {\r\n        // countriesLoc.insertAdjacentHTML(\r\n        //     \"beforeend\",\r\n        //     `<option value=\"\" class=\"placeholder\">Państwo</option>`\r\n        // );\r\n\r\n        // citiesLoc.insertAdjacentHTML(\r\n        //     \"beforeend\",\r\n        //     `<option value=\"\" class=\"placeholder\">Miasto</option>`\r\n        // );\r\n\r\n        function compare(a, b) {\r\n            return a.city.localeCompare(b.city);\r\n        }\r\n\r\n        for (let key in filterCountriesList) {\r\n            filterCountriesList[key].sort(compare);\r\n        }\r\n\r\n        filterCountriesList = Object.keys(filterCountriesList)\r\n            .sort()\r\n            .reduce((accumulator, key) => {\r\n                accumulator[key] = filterCountriesList[key];\r\n                return accumulator;\r\n            }, {});\r\n\r\n        let allCitiesObj = [];\r\n        for (let key in filterCountriesList) {\r\n            // countriesLoc.insertAdjacentHTML(\r\n            //     \"beforeend\",\r\n            //     `<option value=\"${key}\">${key}</option>`\r\n            // );\r\n            allCitiesObj = allCitiesObj.concat(filterCountriesList[key]);\r\n        }\r\n\r\n        let allCitiesArray = [];\r\n        allCitiesObj.forEach((el) => {\r\n            allCitiesArray.push(el.city);\r\n        });\r\n\r\n        allCitiesArray.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n\r\n        allCitiesArray.forEach(function (el) {\r\n            citiesLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${el}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${el}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n        });\r\n    }\r\n\r\n    // sliderOne.min = filterMinSalary.toString();\r\n    // sliderTwo.min = filterMinSalary.toString();\r\n    // sliderOne.max = filterMaxSalary.toString();\r\n    // sliderTwo.max = filterMaxSalary.toString();\r\n    // sliderOne.value = filterMinSalary.toString();\r\n    // sliderTwo.value = filterMaxSalary.toString();\r\n    // slideOne();\r\n    // slideTwo();\r\n};\r\n\r\n// PAGES /////////////////////////////////////////////////////////////\r\nconst changePage = (pageBtn) => {\r\n    pageButtonsLoc.forEach((el) => {\r\n        el.classList.remove(\"active\");\r\n    });\r\n    pageBtn.classList.add(\"active\");\r\n    let firstRecord =\r\n        recordsOnPage * parseInt(pageBtn.innerText) - recordsOnPage;\r\n    let lastRecord = recordsOnPage * parseInt(pageBtn.innerText);\r\n\r\n    filtersON\r\n        ? createRecordBoxes(filteredRecordsArray_11, firstRecord, lastRecord)\r\n        : createRecordBoxes(allRecordsArray, firstRecord, lastRecord);\r\n    globActivePageNo = parseInt(pageBtn.innerText);\r\n    // setTimeout(setParentIframeHeight(), 500);\r\n};\r\n\r\n// RWD /////////////////////////////////////////////////////////////\r\nfunction getWidth() {\r\n    return Math.max(\r\n        document.body.scrollWidth,\r\n        document.documentElement.scrollWidth,\r\n        document.body.offsetWidth,\r\n        document.documentElement.offsetWidth,\r\n        document.documentElement.clientWidth\r\n    );\r\n}\r\n\r\nfunction getHeight() {\r\n    return Math.max(\r\n        document.body.scrollHeight,\r\n        document.documentElement.scrollHeight,\r\n        document.body.offsetHeight,\r\n        document.documentElement.offsetHeight,\r\n        document.documentElement.clientHeight\r\n    );\r\n}\r\n\r\nlet maxPageBtns;\r\n\r\nif (getWidth() < 500) {\r\n    maxPageBtns = 6;\r\n}\r\nif (getWidth() >= 500 && getWidth() < 700) {\r\n    maxPageBtns = 8;\r\n}\r\nif (getWidth() > 700 && getWidth() < 900) {\r\n    maxPageBtns = 10;\r\n}\r\nif (getWidth() > 900 && getWidth() < 1024) {\r\n    maxPageBtns = 15;\r\n}\r\nif (getWidth() > 1024) {\r\n    maxPageBtns = 20;\r\n}\r\n\r\nlet pagesQuantityCalc;\r\n\r\nconst setPages = (recordsNumber) => {\r\n    pagesQuantityCalc = Math.ceil(recordsNumber / recordsOnPage);\r\n\r\n    if (pagesQuantityCalc > maxPageBtns) {\r\n        pagesSwitchLoc.replaceChildren();\r\n\r\n        for (n = 1; n <= maxPageBtns; n++) {\r\n            if (n === 1) {\r\n                pagesSwitchLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<div class=\"page active\">${n}</div>`\r\n                );\r\n            } else {\r\n                pagesSwitchLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<div class=\"page\">${n}</div>`\r\n                );\r\n            }\r\n        }\r\n        pagesSwitchLoc.insertAdjacentHTML(\r\n            \"beforeend\",\r\n            `<div class=\"next active\"><img src=\"./img/chevron-right.svg\" alt=\"\" /></div>`\r\n        );\r\n        let nextBtnLoc = document.querySelector(\".next\");\r\n        nextBtnLoc.addEventListener(\"click\", () => {\r\n            moveNextPagesBtns();\r\n        });\r\n    } else {\r\n        pagesSwitchLoc.replaceChildren();\r\n\r\n        for (n = 1; n <= pagesQuantityCalc; n++) {\r\n            if (n === 1) {\r\n                pagesSwitchLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<div class=\"page active\">${n}</div>`\r\n                );\r\n            } else {\r\n                pagesSwitchLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<div class=\"page\">${n}</div>`\r\n                );\r\n            }\r\n        }\r\n\r\n        pagesSwitchLoc.insertAdjacentHTML(\r\n            \"beforeend\",\r\n            `<div class=\"next\"><img src=\"\" alt=\"\" /></div>`\r\n        );\r\n    }\r\n\r\n    pagesSwitchLoc.insertAdjacentHTML(\r\n        \"afterbegin\",\r\n        `<div class=\"prev\"><img src=\"\" alt=\"\" /></div>`\r\n    );\r\n\r\n    pageButtonsLoc = document.querySelectorAll(\".page\");\r\n    pageButtonsLoc.forEach((el) => {\r\n        el.addEventListener(\"click\", (e) => {\r\n            changePage(e.target);\r\n        });\r\n    });\r\n};\r\n\r\n// create AWARDED RECORDS BOXES ///////////////////////////////////////////////\r\nconst createAwardedRecordBoxes = (recordsArray, filterConfigData) => {\r\n\r\n    awardedResultsLoc.replaceChildren();\r\n\r\n    let awardedRecordsArray = recordsArray.filter((elem) => {\r\n        return elem.awarded;  \r\n    });\r\n\r\n    console.log(awardedRecordsArray)\r\n\r\n    if (awardedRecordsArray.length > 0) {\r\n\r\n        if (filterConfigData.remote_filter) {\r\n            awardedRecordsArray = awardedRecordsArray.filter((elem) => {\r\n                return elem.remote;\r\n            });\r\n        }\r\n        \r\n        if (filterConfigData.language_filter.length > 0) {\r\n            filterAwarded(filterConfigData.language_filter, awardedRecordsArray, \"lang\");\r\n        }\r\n\r\n        if (filterConfigData.branche_filter.length > 0) {\r\n            filterAwarded(filterConfigData.branche_filter, awardedRecordsArray, \"branche\");\r\n        }\r\n\r\n        if (filterConfigData.location_country_filter.length > 0) {\r\n            filterAwarded(filterConfigData.location_country_filter, awardedRecordsArray, \"country\");\r\n        }\r\n\r\n        if (filterConfigData.location_city_filter.length > 0) {\r\n            filterAwarded(filterConfigData.location_city_filter, awardedRecordsArray, \"city\");\r\n        }\r\n\r\n        if (filterConfigData.recruitmentType_filter.length > 0) {\r\n            filterAwarded(filterConfigData.recruitmentType_filter, awardedRecordsArray, \"recruitmentType\");\r\n        }\r\n\r\n        for (i = firstRecordNumber; i < 10; i++) {\r\n            if (awardedRecordsArray[i]) {\r\n                let borderColorClass = \"\";\r\n                let textColorClass = \"\";\r\n\r\n                if (awardedRecordsArray[i].recruitmentType === \"PT\") {\r\n                    borderColorClass = \"pt-border\";\r\n                    textColorClass = \"pt-text\";\r\n                }\r\n                if (awardedRecordsArray[i].recruitmentType === \"RS\") {\r\n                    borderColorClass = \"rs-border\";\r\n                    textColorClass = \"rs-text\";\r\n                }\r\n                if (awardedRecordsArray[i].recruitmentType === \"WEW\") {\r\n                    borderColorClass = \"wew-border\";\r\n                    textColorClass = \"wew-text\";\r\n                }\r\n\r\n                let formaZatrudnienia = \"\";\r\n\r\n                if (awardedRecordsArray[i].jobForm) {\r\n                    awardedRecordsArray[i].jobForm.forEach(function (elem) {\r\n                        formaZatrudnienia =\r\n                            formaZatrudnienia + \"<p>\" + elem + \"</p>\";\r\n                    });\r\n                }\r\n\r\n                awardedResultsLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<a href=\"${\r\n                        awardedRecordsArray[i].url\r\n                    }\" target=\"_blank\"><div class=\"result ${borderColorClass}\">\r\n                <div class=\"top\">\r\n                \r\n                        <div class=\"lang\">\r\n                            <p>${awardedRecordsArray[i].lang}</p>\r\n                        </div>\r\n                        <div class=\"branche-name\">\r\n                            <div class=\"branche\">${\r\n                                awardedRecordsArray[i].branche\r\n                                    ? awardedRecordsArray[i].branche\r\n                                    : \"\"\r\n                            }</div>\r\n                            <div class=\"name ${textColorClass}\">${\r\n                        awardedRecordsArray[i].name\r\n                    }</div>\r\n                        </div>\r\n                    \r\n                </div>\r\n\r\n                <div class=\"bottom\">\r\n                    <div class=\"city-container\">\r\n                        <div class=\"city\"><img src=\"./img/location_dot.svg\">${\r\n                            awardedRecordsArray[i].city\r\n                        }</div></div>\r\n                        <div class=\"details-container\">\r\n                        ${\r\n                            awardedRecordsArray[i].remote\r\n                                ? \"<div class='remote'>zdalna</div>\"\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            awardedRecordsArray[i].relocation\r\n                                ? \"<div class='relocation'>relocation</div>\"\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            awardedRecordsArray[i].jobType\r\n                                ? \"<div class='jobtype'>\" +\r\n                                awardedRecordsArray[i].jobType +\r\n                                \"</div>\"\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            awardedRecordsArray[i].visibleRate\r\n                                ? awardedRecordsArray[i].salaryFrom &&\r\n                                awardedRecordsArray[i].salaryTo\r\n                                    ? \"<div class='salary'>\" +\r\n                                    awardedRecordsArray[i].salaryFrom +\r\n                                    \" - \" +\r\n                                    awardedRecordsArray[i].salaryTo +\r\n                                    \"</div>\"\r\n                                    : \"\"\r\n                                : \"\"\r\n                        }\r\n                        <div class=\"employmentform\">${formaZatrudnienia}</div>\r\n                        </div>\r\n                    \r\n                </div>\r\n\r\n                <div class=\"ribbon-wrap\">\r\n                        <div class=\"ribbon\">\r\n                                <img src=\"./img/star.svg\" alt=\"\">\r\n                                <img src=\"./img/star.svg\" alt=\"\">\r\n                                <img src=\"./img/star.svg\" alt=\"\">\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n\r\n                \r\n\r\n            </div></a>`\r\n                );\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n// show RECORDS NUMBER ///////////////////////////////////////////////\r\nconst summariseDownload = (recordsNumber) => {\r\n    recNumLoc.innerText = `Znaleziono ${recordsNumber} ogłoszeń`;\r\n    if (!recordsNumber) {\r\n        noResultsLoc.classList.add(\"active\");\r\n    } else {\r\n        noResultsLoc.classList.remove(\"active\");\r\n    }\r\n};\r\n\r\n// create FILTER DATA from API data ///////////////////////////////////////////////\r\nconst createDataForFilters = (\r\n    branche,\r\n    jobForm,\r\n    jobType,\r\n    lang,\r\n    visibleRate,\r\n    salaryFrom,\r\n    salaryTo,\r\n    country,\r\n    city,\r\n    lati,\r\n    longi\r\n) => {\r\n   \r\n    if (filterBranchesList.indexOf(branche) === -1 && branche !== undefined) {\r\n        if (filterConfigData.branche_filter.length) {\r\n            if (filterConfigData.branche_filter.indexOf(branche) !== -1) {\r\n                filterBranchesList.push(branche);\r\n            }\r\n        } else {\r\n            filterBranchesList.push(branche);\r\n        }\r\n       \r\n    }\r\n\r\n    if (jobForm) {\r\n        jobForm.forEach(function (elem) {\r\n            if (filterJobFormList.indexOf(elem) === -1) {\r\n                filterJobFormList.push(elem);\r\n            }\r\n        });\r\n    }\r\n\r\n    if (filterJobTypeList.indexOf(jobType) === -1 && jobType !== undefined) {\r\n        filterJobTypeList.push(jobType);\r\n    }\r\n\r\n    if (filterLangList.indexOf(lang) === -1) {\r\n\r\n        if (filterConfigData.language_filter.length) {\r\n            if (filterConfigData.language_filter.indexOf(lang) !== -1) {\r\n                filterLangList.push(lang);\r\n            }\r\n        } else {\r\n            filterLangList.push(lang);\r\n        }\r\n    }\r\n\r\n    // if (visibleRate) {\r\n    //     if (salaryFrom < filterMinSalary) {\r\n    //         filterMinSalary = salaryFrom;\r\n    //     }\r\n    //     if (salaryTo > filterMaxSalary) {\r\n    //         filterMaxSalary = salaryTo;\r\n    //     }\r\n    // }\r\n\r\n    if (filterConfigData.location_country_filter.length) {\r\n        \r\n        if (filterConfigData.location_country_filter.indexOf(country) !== -1) {\r\n            if (filterCountriesList[country]) {\r\n                if (\r\n                    filterCountriesList[country].findIndex(\r\n                        (arr_el) => arr_el.city === city\r\n                    ) === -1\r\n                ) {\r\n                    if (filterConfigData.location_city_filter.length) {\r\n                        if (filterConfigData.location_city_filter.indexOf(city) !== -1) {\r\n                            filterCountriesList[country].push({\r\n                                city: city,\r\n                                lati: lati,\r\n                                longi: longi,\r\n                            });\r\n                        }\r\n                    } else {\r\n                        filterCountriesList[country].push({\r\n                            city: city,\r\n                            lati: lati,\r\n                            longi: longi,\r\n                        });\r\n                    }\r\n                }\r\n            } else {\r\n                filterCountriesList[country] = [];\r\n                if (filterConfigData.location_city_filter.length) {\r\n                    if (filterConfigData.location_city_filter.indexOf(city) !== -1) {\r\n                        filterCountriesList[country].push({\r\n                            city: city,\r\n                            lati: lati,\r\n                            longi: longi,\r\n                        });\r\n                    }\r\n                } else {\r\n                    filterCountriesList[country].push({\r\n                        city: city,\r\n                        lati: lati,\r\n                        longi: longi,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n    } else {\r\n        \r\n        if (filterCountriesList[country]) {\r\n            if (\r\n                filterCountriesList[country].findIndex(\r\n                    (arr_el) => arr_el.city === city\r\n                ) === -1\r\n            ) {\r\n                filterCountriesList[country].push({\r\n                    city: city,\r\n                    lati: lati,\r\n                    longi: longi,\r\n                });\r\n            }\r\n        } else {\r\n            filterCountriesList[country] = [];\r\n            filterCountriesList[country].push({\r\n                city: city,\r\n                lati: lati,\r\n                longi: longi,\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\n// create OBJECTS ARRAY from Raw API JSON ///////////////////////////////////////////////\r\nconst reworkData = (rawAPIArray) => {\r\n    rawAPIArray.forEach((el) => {\r\n        if (el.options.job_location) {\r\n            parsedJobLocation = JSON.parse(el.options.job_location);\r\n        }\r\n\r\n        allRecordsArray.push({\r\n            url: el.url,\r\n            name: el.advert.name,\r\n            branche: el.options.branches,\r\n            lang: el.advert.language,\r\n            jobType: el.options.job_type,\r\n            visibleRate: parseInt(el.options._Widoczna_stawka),\r\n            salaryFrom: parseInt(el.options._spodziewane_wynagrodzenie_od),\r\n            salaryTo: parseInt(el.options._spodziewane_wynagrodzenie_do),\r\n            remote: el.options.remote,\r\n            relocation: el.options._relokacja,\r\n            recruitmentType: el.options._rekrutacja_rodzaj,\r\n            jobForm: el.options._forma_zatrudnienia,\r\n            country: parsedJobLocation.country,\r\n            city: parsedJobLocation.locality,\r\n            lati: parseFloat(parsedJobLocation.latitude),\r\n            longi: parseFloat(parsedJobLocation.longitude),\r\n            description: el.advert.values,\r\n            awarded: el.awarded,\r\n        });\r\n\r\n        createDataForFilters(\r\n            el.options.branches,\r\n            el.options._forma_zatrudnienia,\r\n            el.options.job_type,\r\n            el.advert.language,\r\n            parseInt(el.options._Widoczna_stawka),\r\n            parseInt(el.options._spodziewane_wynagrodzenie_od),\r\n            parseInt(el.options._spodziewane_wynagrodzenie_do),\r\n            parsedJobLocation.country,\r\n            parsedJobLocation.locality,\r\n            parseFloat(parsedJobLocation.latitude),\r\n            parseFloat(parsedJobLocation.longitude)\r\n        );\r\n    });\r\n};\r\n\r\n// gets DATA FROM API ///////////////////////////////////////////////\r\nconst getAPI = (apiPage) => {\r\n    const response = fetch(\r\n        \"https://grupaprogres.traffit.com/public/job_posts/published\",\r\n        {\r\n            mode: \"cors\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"X-Request-Page-Size\": \"100\",\r\n                \"X-Request-Current-Page\": apiPage,\r\n                \"X-Request-Sort\": '{\"sort_by\": \"id\", \"direction\": \"ASC\"}',\r\n            },\r\n        }\r\n    );\r\n\r\n    return response;\r\n};\r\n\r\nconst loopOnAPI = (jsonData, filterConfigData) => {\r\n    if (jsonData.length > 0) {\r\n        rawAPIArray = rawAPIArray.concat(jsonData);\r\n        apiPage++;\r\n        console.log(\"rawAPIArray\", rawAPIArray)\r\n        createRecordsObjFromAPI(apiPage, filterConfigData);\r\n    } else {\r\n        reworkData(rawAPIArray);\r\n        console.log(\"allRecordsArray\", allRecordsArray)\r\n        recordsNumber = rawAPIArray.length;\r\n        console.log(\"recordsNumber\", recordsNumber)\r\n        // summariseDownload(recordsNumber); // not used\r\n        createAwardedRecordBoxes(allRecordsArray, filterConfigData); // obecnie brak wyróżnionych ogłoszeń - wymagane ostylowanie css gdy się pojawią\r\n        setPages(recordsNumber); // trzeba dokończyć listenery na utworzonych buttonach\r\n        createFilterLists(filterConfigData);\r\n        // dropDownBtnStart();\r\n        // pagesContainerStart();\r\n        createFilteredRecordsArray();\r\n\r\n        \r\n    }\r\n};\r\n\r\nasync function createRecordsObjFromAPI(apiPage, filterConfigData) {\r\n    const rawData = await getAPI(apiPage);\r\n    const jsonData = await rawData.json();\r\n    loopOnAPI(jsonData, filterConfigData);\r\n}\r\n\r\n// consider configuration filters ////////////////////////\r\nconst getConfigFilter = () => {\r\n    const response = fetch(\"./config/config.json\");\r\n    return response;\r\n};\r\n\r\nasync function readConfigFilter() {\r\n    try {\r\n        const rawData = await getConfigFilter();\r\n        filterConfigData = await rawData.json();\r\n        console.log(\"filterConfigData\", filterConfigData)\r\n        createRecordsObjFromAPI(apiPage, filterConfigData);\r\n    } catch (e) {\r\n        console.error(e);\r\n        createRecordsObjFromAPI(apiPage);\r\n    }\r\n}\r\n\r\nreadConfigFilter();\r\n\r\n// change RECORDS QUANTITY ON PAGE //////////////////////////////////////////////////\r\nrecordsOnPageLoc.addEventListener(\"change\", (e) => {\r\n    recordsOnPage = parseInt(e.target.value);\r\n\r\n    filtersON\r\n        ? createRecordBoxes(filteredRecordsArray_11, 0, recordsOnPage)\r\n        : createRecordBoxes(allRecordsArray, 0, recordsOnPage);\r\n    setPages(recordsNumber);\r\n\r\n    // setParentIframeHeight();\r\n});\r\n\r\n// SEARCH LISTENER /////////////////////////////////////////////////////////////\r\nsearchBtn.addEventListener(\"click\", createFilteredRecordsArray);"]}