{"version":3,"sources":["main.js"],"names":["cityListBtnLoc","document","querySelector","cityListLoc","distanceListBtnLoc","distanceListLoc","sectorListBtnLoc","sectorListLoc","employmentFormListBtnLoc","employmentFormListLoc","workingHoursListBtnLoc","workingHoursListLoc","languageListBtnLoc","languageListLoc","awardedResultsLoc","recordsOnPageLoc","pagesSwitchLoc","brancheWrapperLoc","branchesLoc","jobFormLoc","jobTypeLoc","langLoc","citiesLoc","resultsLoc","addEventListener","classList","toggle","filterConfigData","apiPage","rawAPIArray","allRecordsArray","recordsNumber","recordsOnPage","filtersON","filterBranchesList","filterJobFormList","filterJobTypeList","filterLangList","filterCountriesList","filterListMaxHeight","value","createRecordBoxes","recordsArray","firstRecordNumber","replaceChildren","i","borderColorClass","textColorClass","recruitmentType_colorOnly","length","indexOf","recruitmentType","formaZatrudnienia","jobForm","forEach","elem","insertAdjacentHTML","url","lang","branche","name","city","jobType","visibleRate","salaryFrom","salaryTo","remote","relocation","createFilteredRecordsArray","branchesChildrenLoc","querySelectorAll","console","log","filteredRecordsArray","selectedBranches","branche_filter","Array","from","filter","checked","map","filteredRecordsArray_1","el","index","addFlag","selectedFiltr","push","setPages","hideFilter","setTimeout","setParentIframeHeight","pagesContainerStart","pagesContainer","add","dropDownBtnStart","dropDownLoc","showHideFilters","createFilterLists","branche_visible","sort","a","b","localeCompare","rowHeight","Object","keys","compare","key","reduce","accumulator","allCitiesObj","concat","allCitiesArray","changePage","pageBtn","pageButtonsLoc","remove","firstRecord","parseInt","innerText","lastRecord","filteredRecordsArray_11","globActivePageNo","getWidth","Math","max","body","scrollWidth","documentElement","offsetWidth","clientWidth","getHeight","scrollHeight","offsetHeight","clientHeight","maxPageBtns","pagesQuantityCalc","ceil","n","moveNextPagesBtns","e","target","createAwardedRecordBoxes","awardedRecordsArray","awarded","remote_filter","language_filter","filterAwarded","location_country_filter","location_city_filter","recruitmentType_filter","summariseDownload","recNumLoc","noResultsLoc","createDataForFilters","country","lati","longi","undefined","findIndex","arr_el","reworkData","options","job_location","parsedJobLocation","JSON","parse","advert","branches","language","job_type","_Widoczna_stawka","_spodziewane_wynagrodzenie_od","_spodziewane_wynagrodzenie_do","_relokacja","_rekrutacja_rodzaj","_forma_zatrudnienia","locality","parseFloat","latitude","longitude","description","values","getAPI","fetch","mode","headers","loopOnAPI","jsonData","createRecordsObjFromAPI","async","rawData","json","getConfigFilter","readConfigFilter","error"],"mappings":"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","file":"all.min.js","sourcesContent":["const cityListBtnLoc = document.querySelector(\".city .arrow-down\");\r\nconst cityListLoc = document.querySelector(\".city .list\");\r\nconst distanceListBtnLoc = document.querySelector(\".distance .arrow-down\");\r\nconst distanceListLoc = document.querySelector(\".distance .list\");\r\nconst sectorListBtnLoc = document.querySelector(\".sector .arrow-down\");\r\nconst sectorListLoc = document.querySelector(\".sector .list\");\r\nconst employmentFormListBtnLoc = document.querySelector(\".employment-form .arrow-down\");\r\nconst employmentFormListLoc = document.querySelector(\".employment-form .list\");\r\nconst workingHoursListBtnLoc = document.querySelector(\".working-hours .arrow-down\");\r\nconst workingHoursListLoc = document.querySelector(\".working-hours .list\");\r\nconst languageListBtnLoc = document.querySelector(\".language .arrow-down\");\r\nconst languageListLoc = document.querySelector(\".language .list\");\r\n\r\nconst awardedResultsLoc = document.querySelector(\".awarded\");\r\nconst recordsOnPageLoc = document.querySelector(\".records-on-page\");\r\nconst pagesSwitchLoc = document.querySelector(\".pages\");\r\n\r\nconst brancheWrapperLoc = document.querySelector(\".sector\");\r\nconst branchesLoc = document.querySelector(\".sector ul\");\r\nconst jobFormLoc = document.querySelector(\".employment-form ul\"); \r\nconst jobTypeLoc = document.querySelector(\".working-hours ul\"); \r\nconst langLoc = document.querySelector(\".language ul\");\r\nconst citiesLoc = document.querySelector(\".city ul\");\r\nconst resultsLoc = document.querySelector(\".results\");\r\n\r\ncityListBtnLoc.addEventListener(\"click\", () => {\r\n    cityListLoc.classList.toggle(\"expand\");\r\n})\r\n\r\ndistanceListBtnLoc.addEventListener(\"click\", () => {\r\n    distanceListLoc.classList.toggle(\"expand\");\r\n})\r\n\r\nsectorListBtnLoc.addEventListener(\"click\", () => {\r\n    sectorListLoc.classList.toggle(\"expand\");\r\n})\r\n\r\nemploymentFormListBtnLoc.addEventListener(\"click\", () => {\r\n    employmentFormListLoc.classList.toggle(\"expand\");\r\n})\r\n\r\nworkingHoursListBtnLoc.addEventListener(\"click\", () => {\r\n    workingHoursListLoc.classList.toggle(\"expand\");\r\n})\r\n\r\nlanguageListBtnLoc.addEventListener(\"click\", () => {\r\n    languageListLoc.classList.toggle(\"expand\");\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet filterConfigData = {};\r\nlet apiPage = 1;\r\nlet rawAPIArray = [];\r\nlet allRecordsArray = [];\r\nlet recordsNumber = 0;\r\nlet recordsOnPage = 20;\r\nlet filtersON = false;\r\nlet filterBranchesList = [];\r\nlet filterJobFormList = [];\r\nlet filterJobTypeList = [];\r\nlet filterLangList = [];\r\nlet filterCountriesList = {};\r\nlet filterListMaxHeight = 0;\r\n\r\nrecordsOnPageLoc.value = recordsOnPage;\r\n\r\n// create RECORDS BOXES ///////////////////////////////////////////////\r\nconst createRecordBoxes = (recordsArray, firstRecordNumber, recordsOnPage) => {\r\n    resultsLoc.replaceChildren();\r\n\r\n    for (i = firstRecordNumber; i < recordsOnPage; i++) {\r\n        // colouring of records by type of recruitment\r\n\r\n        if (recordsArray[i]) {\r\n            let borderColorClass = \"\";\r\n            let textColorClass = \"\";\r\n\r\n            if (!filterConfigData.recruitmentType_colorOnly.length) {\r\n                if (recordsArray[i].recruitmentType === \"PT\") {\r\n                    borderColorClass = \"pt-border\";\r\n                    textColorClass = \"pt-text\";\r\n                }\r\n                if (recordsArray[i].recruitmentType === \"RS\") {\r\n                    borderColorClass = \"rs-border\";\r\n                    textColorClass = \"rs-text\";\r\n                }\r\n                if (recordsArray[i].recruitmentType === \"WEW\") {\r\n                    borderColorClass = \"wew-border\";\r\n                    textColorClass = \"wew-text\";\r\n                }\r\n            } else {\r\n                if (\r\n                    filterConfigData.recruitmentType_colorOnly.indexOf(\"PT\") !==\r\n                    -1\r\n                ) {\r\n                    if (recordsArray[i].recruitmentType === \"PT\") {\r\n                        borderColorClass = \"pt-border\";\r\n                        textColorClass = \"pt-text\";\r\n                    }\r\n                }\r\n\r\n                if (\r\n                    filterConfigData.recruitmentType_colorOnly.indexOf(\"RS\") !==\r\n                    -1\r\n                ) {\r\n                    if (recordsArray[i].recruitmentType === \"RS\") {\r\n                        borderColorClass = \"rs-border\";\r\n                        textColorClass = \"rs-text\";\r\n                    }\r\n                }\r\n\r\n                if (\r\n                    filterConfigData.recruitmentType_colorOnly.indexOf(\r\n                        \"WEW\"\r\n                    ) !== -1\r\n                ) {\r\n                    if (recordsArray[i].recruitmentType === \"WEW\") {\r\n                        borderColorClass = \"wew-border\";\r\n                        textColorClass = \"wew-text\";\r\n                    }\r\n                }\r\n            }\r\n\r\n            let formaZatrudnienia = \"\";\r\n\r\n            if (recordsArray[i].jobForm) {\r\n                recordsArray[i].jobForm.forEach(function (elem) {\r\n                    formaZatrudnienia =\r\n                        formaZatrudnienia + \"<p>\" + elem + \"</p>\";\r\n                });\r\n            }\r\n\r\n            resultsLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<a href=\"${\r\n                    recordsArray[i].url\r\n                }\" target=\"_blank\"><div class=\"result ${borderColorClass}\">\r\n            <div class=\"top\">\r\n              \r\n                    <div class=\"lang\"><p>${recordsArray[i].lang}</p></div>\r\n                    <div class=\"branche-name\">\r\n                        <div class=\"branche\">${\r\n                            recordsArray[i].branche\r\n                                ? recordsArray[i].branche\r\n                                : \"\"\r\n                        }</div>\r\n                        <div class=\"name ${textColorClass}\">${\r\n                    recordsArray[i].name\r\n                }</div>\r\n                   \r\n                </div>\r\n              \r\n            </div>\r\n\r\n            <div class=\"bottom\">\r\n                <div class=\"city-container\">\r\n                    <div class=\"city\"><img src=\"./img/location_dot.svg\">${\r\n                        recordsArray[i].city\r\n                    }</div>\r\n                    </div>\r\n                    <div class=\"details-container\">\r\n                    ${\r\n                        recordsArray[i].jobType\r\n                            ? \"<div class='jobtype'>\" +\r\n                              recordsArray[i].jobType +\r\n                              \"</div>\"\r\n                            : \"\"\r\n                    }\r\n                    ${\r\n                        recordsArray[i].visibleRate\r\n                            ? recordsArray[i].salaryFrom &&\r\n                              recordsArray[i].salaryTo\r\n                                ? \"<div class='salary'>\" +\r\n                                  recordsArray[i].salaryFrom +\r\n                                  \" - \" +\r\n                                  recordsArray[i].salaryTo +\r\n                                  \"</div>\"\r\n                                : \"\"\r\n                            : \"\"\r\n                    }\r\n                    ${\r\n                        recordsArray[i].remote\r\n                            ? \"<div class='remote'>zdalna</div>\"\r\n                            : \"\"\r\n                    }\r\n                    ${\r\n                        recordsArray[i].relocation\r\n                            ? \"<div class='relocation'>relocation</div>\"\r\n                            : \"\"\r\n                    }\r\n                    <div class=\"employmentform\">${formaZatrudnienia}</div>\r\n                    </div>\r\n                </div>\r\n                   \r\n                </div>\r\n          \r\n\r\n        </div></a>`\r\n            );\r\n        }\r\n    }\r\n};\r\n\r\n// filter the data to create FILTERED OBJECTS ARRAY ///////////////////////////////\r\nconst createFilteredRecordsArray = () => {\r\n    const branchesChildrenLoc = branchesLoc.querySelectorAll(\"li input\");\r\n    // const jobFormChildrenLoc = document.querySelectorAll(\".job-form option\");\r\n    // const jobTypeChildrenLoc = document.querySelectorAll(\".job-type option\");\r\n    // const langChildrenLoc = document.querySelectorAll(\".lang option\");\r\n    // const countriesChildrenLoc = document.querySelectorAll(\".countries option\");\r\n    // const citiesChildrenLoc = document.querySelectorAll(\".cities option\");\r\n\r\n    console.log(branchesChildrenLoc)\r\n\r\n    let filteredRecordsArray = allRecordsArray;\r\n\r\n    // selectedBranches ////////////////\r\n\r\n    let selectedBranches = [];\r\n\r\n    if (filterConfigData.branche_filter.length) {\r\n        selectedBranches = filterConfigData.branche_filter;\r\n    } else {\r\n        selectedBranches = Array.from(branchesChildrenLoc)\r\n            .filter(function (elem) {\r\n                return elem.checked;\r\n            })\r\n            .map(function (elem) {\r\n                return elem.value;\r\n            });\r\n    }\r\n\r\n    console.log(selectedBranches)\r\n\r\n    let filteredRecordsArray_1 = [];\r\n\r\n    if (selectedBranches.length !== 0) {\r\n        filteredRecordsArray.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            selectedBranches.forEach((selectedFiltr) => {\r\n                if (el.branche === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_1.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_1 = filteredRecordsArray;\r\n    }\r\n\r\n    // selectedJobForms ////////////////\r\n\r\n    // let selectedJobForms = Array.from(jobFormChildrenLoc)\r\n    //     .filter(function (elem) {\r\n    //         return elem.selected;\r\n    //     })\r\n    //     .map(function (elem) {\r\n    //         return elem.value;\r\n    //     });\r\n\r\n    // let filteredRecordsArray_2 = [];\r\n\r\n    // if (selectedJobForms.length !== 0) {\r\n    //     filteredRecordsArray_1.forEach((el, index) => {\r\n    //         if (el.jobForm) {\r\n    //             let addFlag = false;\r\n\r\n    //             selectedJobForms.forEach((selectedFiltr) => {\r\n    //                 if (el.jobForm.indexOf(selectedFiltr) !== -1) {\r\n    //                     addFlag = true;\r\n    //                 }\r\n    //             });\r\n\r\n    //             if (addFlag) {\r\n    //                 filteredRecordsArray_2.push(el);\r\n    //             }\r\n    //         }\r\n    //     });\r\n    // } else {\r\n    //     filteredRecordsArray_2 = filteredRecordsArray_1;\r\n    // }\r\n\r\n    // // selectedJobTypes////////////////\r\n\r\n    // let selectedjobTypes = Array.from(jobTypeChildrenLoc)\r\n    //     .filter(function (elem) {\r\n    //         return elem.selected;\r\n    //     })\r\n    //     .map(function (elem) {\r\n    //         return elem.value;\r\n    //     });\r\n\r\n    // let filteredRecordsArray_3 = [];\r\n\r\n    // if (selectedjobTypes.length !== 0) {\r\n    //     filteredRecordsArray_2.forEach((el, index) => {\r\n    //         let addFlag = false;\r\n\r\n    //         selectedjobTypes.forEach((selectedFiltr) => {\r\n    //             if (el.jobType === selectedFiltr) {\r\n    //                 addFlag = true;\r\n    //             }\r\n    //         });\r\n\r\n    //         if (addFlag) {\r\n    //             filteredRecordsArray_3.push(el);\r\n    //         }\r\n    //     });\r\n    // } else {\r\n    //     filteredRecordsArray_3 = filteredRecordsArray_2;\r\n    // }\r\n\r\n    // // selectedLangs ////////////////\r\n    // let selectedLangs = [];\r\n\r\n    // if (\r\n    //     filterConfigData.language_filter.length \r\n    //     // && !filterConfigData.language_visible\r\n    // ) {\r\n    //     selectedLangs = filterConfigData.language_filter;\r\n    // } else {\r\n    //     selectedLangs = Array.from(langChildrenLoc)\r\n    //         .filter(function (elem) {\r\n    //             return elem.selected;\r\n    //         })\r\n    //         .map(function (elem) {\r\n    //             return elem.value;\r\n    //         });\r\n    // }\r\n\r\n    // let filteredRecordsArray_4 = [];\r\n\r\n    // if (selectedLangs.length !== 0) {\r\n    //     filteredRecordsArray_3.forEach((el, index) => {\r\n    //         let addFlag = false;\r\n\r\n    //         selectedLangs.forEach((selectedFiltr) => {\r\n    //             if (el.lang === selectedFiltr) {\r\n    //                 addFlag = true;\r\n    //             }\r\n    //         });\r\n\r\n    //         if (addFlag) {\r\n    //             filteredRecordsArray_4.push(el);\r\n    //         }\r\n    //     });\r\n    // } else {\r\n    //     filteredRecordsArray_4 = filteredRecordsArray_3;\r\n    // }\r\n\r\n    // // selectedSalary ////////////////\r\n\r\n    // let selectedValOne;\r\n    // let selectedValTwo;\r\n    // if (salaryMarkLoc.checked) {\r\n    //     selectedValOne = parseInt(displayValOne.innerText);\r\n    //     selectedValTwo = parseInt(displayValTwo.innerText);\r\n    // }\r\n\r\n    // let filteredRecordsArray_5 = [];\r\n\r\n    // if (salaryMarkLoc.checked) {\r\n    //     filteredRecordsArray_4.forEach((el, index) => {\r\n    //         let addFlag = false;\r\n\r\n    //         if (el.visibleRate) {\r\n    //             if (el.salaryTo && el.salaryFrom) {\r\n    //                 if (\r\n    //                     el.salaryTo >= selectedValOne &&\r\n    //                     el.salaryFrom <= selectedValTwo\r\n    //                 ) {\r\n    //                     addFlag = true;\r\n    //                 }\r\n    //             }\r\n    //             if (el.salaryTo && !el.salaryFrom) {\r\n    //                 if (el.salaryTo >= selectedValOne) {\r\n    //                     addFlag = true;\r\n    //                 }\r\n    //             }\r\n    //             if (!el.salaryTo && el.salaryFrom) {\r\n    //                 if (el.salaryFrom <= selectedValTwo) {\r\n    //                     addFlag = true;\r\n    //                 }\r\n    //             }\r\n    //         }\r\n\r\n    //         if (addFlag) {\r\n    //             filteredRecordsArray_5.push(el);\r\n    //         }\r\n    //     });\r\n    // } else {\r\n    //     filteredRecordsArray_5 = filteredRecordsArray_4;\r\n    // }\r\n\r\n    // // selectedCountry ////////////////\r\n\r\n    // let selectedCountry = [];\r\n\r\n    // if (\r\n    //     filterConfigData.location_country_filter.length \r\n    //     // && !filterConfigData.location_visible\r\n    // ) {\r\n    //     selectedCountry = filterConfigData.location_country_filter;\r\n    // } else {\r\n    //     if (locationMarkLoc.checked) {\r\n    //         selectedCountry = Array.from(countriesChildrenLoc)\r\n    //             .filter(function (elem) {\r\n    //                 if (elem.value) {\r\n    //                     return elem.selected;\r\n    //                 }\r\n    //             })\r\n    //             .map(function (elem) {\r\n    //                 if (elem.value) {\r\n    //                     return elem.value;\r\n    //                 }\r\n    //             });\r\n    //     }\r\n    // }\r\n\r\n    // let filteredRecordsArray_6 = [];\r\n\r\n    // if (\r\n    //     locationMarkLoc.checked ||\r\n    //     (filterConfigData.location_country_filter.length \r\n    //         // && !filterConfigData.location_visible\r\n    //         )\r\n    // ) {\r\n    //     if (selectedCountry.length) {\r\n    //         filteredRecordsArray_5.forEach((el, index) => {\r\n    //             let addFlag = false;\r\n\r\n    //             selectedCountry.forEach((selectedFiltr) => {\r\n    //                 if (el.country === selectedFiltr) {\r\n    //                     addFlag = true;\r\n    //                 }\r\n    //             });\r\n\r\n    //             if (addFlag) {\r\n    //                 filteredRecordsArray_6.push(el);\r\n    //             }\r\n    //         });\r\n    //     } else {\r\n    //         filteredRecordsArray_6 = filteredRecordsArray_5;\r\n    //     }\r\n    // } else {\r\n    //     filteredRecordsArray_6 = filteredRecordsArray_5;\r\n    // }\r\n\r\n    // // selectedCity & selectedDistance ////////////////\r\n\r\n    // let selectedCity = [];\r\n\r\n    // if (\r\n    //     filterConfigData.location_city_filter.length\r\n    //     // && !filterConfigData.location_visible\r\n    // ) {\r\n    //     selectedCity = filterConfigData.location_city_filter;\r\n    // } else {\r\n    //     if (locationMarkLoc.checked) {\r\n    //         selectedCity = Array.from(citiesChildrenLoc)\r\n    //             .filter(function (elem) {\r\n    //                 if (elem.value) {\r\n    //                     return elem.selected;\r\n    //                 }\r\n    //             })\r\n    //             .map(function (elem) {\r\n    //                 if (elem.value) {\r\n    //                     return elem.value;\r\n    //                 }\r\n    //             });\r\n    //     }\r\n    // }\r\n\r\n    // let filteredRecordsArray_7 = [];\r\n\r\n    // if (\r\n    //     locationMarkLoc.checked ||\r\n    //     (filterConfigData.location_city_filter.length \r\n    //         // && !filterConfigData.location_visible\r\n    //         )\r\n    // ) {\r\n    //     if (selectedCity.length) {\r\n    //         let selectedDistance = 0;\r\n\r\n    //         selectedDistance = parseInt(locationDotLoc.value);\r\n\r\n    //         let lati;\r\n    //         let longi;\r\n    //         let min_lati;\r\n    //         let max_lati;\r\n    //         let min_longi;\r\n    //         let max_longi;\r\n\r\n    //         filteredRecordsArray_6.forEach((el, index) => {\r\n    //             if (el.city === selectedCity[0]) {\r\n    //                 lati = el.lati;\r\n    //                 longi = el.longi;\r\n\r\n    //                 min_lati = lati - selectedDistance * 0.009044;\r\n    //                 max_lati = lati + selectedDistance * 0.009044;\r\n    //                 min_longi =\r\n    //                     longi -\r\n    //                     (selectedDistance * 0.0089831) /\r\n    //                         Math.cos((lati * Math.PI) / 180);\r\n    //                 max_longi =\r\n    //                     longi +\r\n    //                     (selectedDistance * 0.0089831) /\r\n    //                         Math.cos((lati * Math.PI) / 180);\r\n    //             }\r\n    //         });\r\n\r\n    //         filteredRecordsArray_6.forEach((el, index) => {\r\n    //             let addFlag = false;\r\n\r\n    //             if (\r\n    //                 el.lati <= max_lati &&\r\n    //                 el.lati >= min_lati &&\r\n    //                 el.longi <= max_longi &&\r\n    //                 el.longi >= min_longi\r\n    //             ) {\r\n    //                 addFlag = true;\r\n    //             }\r\n\r\n    //             if (addFlag) {\r\n    //                 filteredRecordsArray_7.push(el);\r\n    //             }\r\n    //         });\r\n    //     } else {\r\n    //         filteredRecordsArray_7 = filteredRecordsArray_6;\r\n    //     }\r\n    // } else {\r\n    //     filteredRecordsArray_7 = filteredRecordsArray_6;\r\n    // }\r\n\r\n    // // selectedRemote ////////////////\r\n\r\n    // let filteredRecordsArray_8 = [];\r\n\r\n    // if (\r\n    //     remoteLoc.checked ||\r\n    //     (filterConfigData.remote_filter \r\n    //         // && !filterConfigData.remote_visible\r\n    //         )\r\n    // ) {\r\n    //     filteredRecordsArray_7.forEach((el, index) => {\r\n    //         let addFlag = false;\r\n\r\n    //         if (el.remote) {\r\n    //             addFlag = true;\r\n    //         }\r\n\r\n    //         if (addFlag) {\r\n    //             filteredRecordsArray_8.push(el);\r\n    //         }\r\n    //     });\r\n    // } else {\r\n    //     filteredRecordsArray_8 = filteredRecordsArray_7;\r\n    // }\r\n\r\n    // // selectedRelocation ////////////////\r\n\r\n    // let filteredRecordsArray_9 = [];\r\n\r\n    // if (relocationLoc.checked) {\r\n    //     filteredRecordsArray_8.forEach((el, index) => {\r\n    //         let addFlag = false;\r\n\r\n    //         if (el.relocation) {\r\n    //             addFlag = true;\r\n    //         }\r\n\r\n    //         if (addFlag) {\r\n    //             filteredRecordsArray_9.push(el);\r\n    //         }\r\n    //     });\r\n    // } else {\r\n    //     filteredRecordsArray_9 = filteredRecordsArray_8;\r\n    // }\r\n\r\n    // // searchText ////////////////\r\n\r\n    // let filteredRecordsArray_10 = [];\r\n\r\n    // let searchText = searchInputLoc.value;\r\n\r\n    // if (searchText) {\r\n    //     filteredRecordsArray_9.forEach((el, index) => {\r\n    //         let addFlag = false;\r\n\r\n    //         let position;\r\n\r\n    //         el.description.forEach(function (elem) {\r\n    //             if (elem.value && elem.field_id !== \"geolocation\") {\r\n    //                 position = elem.value\r\n    //                     .toLowerCase()\r\n    //                     .search(searchText.toLowerCase());\r\n    //                 if (position !== -1) {\r\n    //                     addFlag = true;\r\n    //                 }\r\n    //             }\r\n    //         });\r\n\r\n    //         position = el.name.toLowerCase().search(searchText.toLowerCase());\r\n    //         if (position !== -1) {\r\n    //             addFlag = true;\r\n    //         }\r\n\r\n    //         if (addFlag) {\r\n    //             filteredRecordsArray_10.push(el);\r\n    //         }\r\n    //     });\r\n    // } else {\r\n    //     filteredRecordsArray_10 = filteredRecordsArray_9;\r\n    // }\r\n\r\n    // // selectedRecruitmentType (coloring of records) ////////////////\r\n    // filteredRecordsArray_11 = [];\r\n    \r\n    // let selectedRecruitmentType = [];\r\n\r\n    // if (filterConfigData.recruitmentType_filter.length) {\r\n    //     selectedRecruitmentType = filterConfigData.recruitmentType_filter;\r\n    // }\r\n\r\n    // if (selectedRecruitmentType.length !== 0) {\r\n    //     filteredRecordsArray_10.forEach((el, index) => {\r\n    //         let addFlag = false;\r\n\r\n    //         selectedRecruitmentType.forEach((selectedFiltr) => {\r\n    //             if (el.recruitmentType === selectedFiltr) {\r\n    //                 addFlag = true;\r\n    //             }\r\n    //         });\r\n\r\n    //         if (addFlag) {\r\n    //             filteredRecordsArray_11.push(el);\r\n    //         }\r\n    //     });\r\n    // } else {\r\n    //     filteredRecordsArray_11 = filteredRecordsArray_10;\r\n    // }\r\n\r\n    // recordsNumber = filteredRecordsArray_11.length;\r\n    recordsNumber = filteredRecordsArray_1.length;\r\n    // summariseDownload(recordsNumber);\r\n    // createRecordBoxes(filteredRecordsArray_11, 0, recordsOnPage);\r\n    createRecordBoxes(filteredRecordsArray_1, 0, recordsOnPage);\r\n    setPages(recordsNumber);\r\n    filtersON = true;\r\n    hideFilter();\r\n    \r\n    setTimeout(setParentIframeHeight, 1000);\r\n    \r\n};\r\n\r\nconst pagesContainerStart = () => {\r\n    pagesContainer.classList.add(\"active\");\r\n};\r\n\r\nconst dropDownBtnStart = () => {\r\n    dropDownLoc.addEventListener(\"click\", showHideFilters);\r\n\r\n    dropDownLoc.classList.add(\"active\");\r\n};\r\n\r\n// create HTML FILTERS LISTS //////////////////////////////////////////////////////\r\nconst createFilterLists = (filterConfigData) => {\r\n\r\n    // if (!filterConfigData.salary_visible) {\r\n    //     salaryLoc.classList.add(\"unactive\");\r\n    // }\r\n\r\n    // if (!filterConfigData.relocation_visible) {\r\n    //     relocationWrapperLoc.classList.add(\"unactive\");\r\n    // }\r\n\r\n    // if (!filterConfigData.language_visible) {\r\n    //     langWrapperLoc.classList.add(\"unactive\");\r\n    // }\r\n\r\n    // if (!filterConfigData.remote_visible) {\r\n    //     remoteWrapperLoc.classList.add(\"unactive\");\r\n    // }\r\n\r\n    // if (!filterConfigData.location_visible) {\r\n    //     locWrapperLoc.classList.add(\"unactive\");\r\n    // }\r\n\r\n    if (!filterConfigData.branche_visible) {\r\n        brancheWrapperLoc.classList.add(\"unactive\");\r\n    }\r\n\r\n    // let isSamsungBrowser = navigator.userAgent.match(/SamsungBrowser/i);\r\n    // let isChromeBrowser = navigator.userAgent.match(/Chrome/i);\r\n\r\n    if (filterBranchesList.length > 0) {\r\n        filterBranchesList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n        rowHeight = filterBranchesList.length * 21 + 3;\r\n        filterListMaxHeight = rowHeight;\r\n        // if (getMobileOperatingSystem() === \"unknown\") {\r\n            // brancheListLoc.style.height = String(rowHeight) + \"px\";\r\n        // } else if (isSamsungBrowser || isChromeBrowser) {\r\n        //     branchesLoc.style.height = \"50px\";\r\n        // } else {\r\n        //     branchesLoc.style.height = String(rowHeight) + \"px\";\r\n        // }\r\n        \r\n        filterBranchesList.forEach(function (el) {\r\n            branchesLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${el}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${el}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n            \r\n        });\r\n    }\r\n\r\n    if (filterJobFormList.length > 0) {\r\n        filterJobFormList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n        rowHeight = filterJobFormList.length * 21 + 3;\r\n        // if (getMobileOperatingSystem() === \"unknown\") {\r\n            // jobFormLoc.style.height = String(rowHeight) + \"px\";\r\n        // } else if (isSamsungBrowser || isChromeBrowser) {\r\n        //     jobFormLoc.style.height = \"50px\";\r\n        // } else {\r\n        //     jobFormLoc.style.height = String(rowHeight) + \"px\";\r\n        // }\r\n        filterJobFormList.forEach(function (el) {\r\n            jobFormLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${el}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${el}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (filterJobTypeList.length > 0) {\r\n        filterJobTypeList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n        rowHeight = filterJobTypeList.length * 21 + 3;\r\n        // if (getMobileOperatingSystem() === \"unknown\") {\r\n            // jobTypeLoc.style.height = String(rowHeight) + \"px\";\r\n        // } else if (isSamsungBrowser || isChromeBrowser) {\r\n        //     jobTypeLoc.style.height = \"50px\";\r\n        // } else {\r\n        //     jobTypeLoc.style.height = String(rowHeight) + \"px\";\r\n        // }\r\n        filterJobTypeList.forEach(function (el) {\r\n            jobTypeLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${el}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${el}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (filterLangList.length > 0) {\r\n        filterLangList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n        rowHeight = filterLangList.length * 21 + 3;\r\n        // if (getMobileOperatingSystem() === \"unknown\") {\r\n            // langLoc.style.height = String(rowHeight) + \"px\";\r\n        // } else if (isSamsungBrowser || isChromeBrowser) {\r\n        //     langLoc.style.height = \"50px\";\r\n        // } else {\r\n        //     langLoc.style.height = String(rowHeight) + \"px\";\r\n        // }\r\n        filterLangList.forEach(function (el) {\r\n            langLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${el}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${el}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n        });\r\n    }\r\n\r\n    console.log(filterCountriesList);\r\n\r\n    if (Object.keys(filterCountriesList).length > 0) {\r\n        // countriesLoc.insertAdjacentHTML(\r\n        //     \"beforeend\",\r\n        //     `<option value=\"\" class=\"placeholder\">Państwo</option>`\r\n        // );\r\n\r\n        // citiesLoc.insertAdjacentHTML(\r\n        //     \"beforeend\",\r\n        //     `<option value=\"\" class=\"placeholder\">Miasto</option>`\r\n        // );\r\n\r\n        function compare(a, b) {\r\n            return a.city.localeCompare(b.city);\r\n        }\r\n\r\n        for (let key in filterCountriesList) {\r\n            filterCountriesList[key].sort(compare);\r\n        }\r\n\r\n        filterCountriesList = Object.keys(filterCountriesList)\r\n            .sort()\r\n            .reduce((accumulator, key) => {\r\n                accumulator[key] = filterCountriesList[key];\r\n                return accumulator;\r\n            }, {});\r\n\r\n        let allCitiesObj = [];\r\n        for (let key in filterCountriesList) {\r\n            // countriesLoc.insertAdjacentHTML(\r\n            //     \"beforeend\",\r\n            //     `<option value=\"${key}\">${key}</option>`\r\n            // );\r\n            allCitiesObj = allCitiesObj.concat(filterCountriesList[key]);\r\n        }\r\n\r\n        let allCitiesArray = [];\r\n        allCitiesObj.forEach((el) => {\r\n            allCitiesArray.push(el.city);\r\n        });\r\n\r\n        allCitiesArray.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n\r\n        allCitiesArray.forEach(function (el) {\r\n            citiesLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${el}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${el}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n        });\r\n    }\r\n\r\n    // sliderOne.min = filterMinSalary.toString();\r\n    // sliderTwo.min = filterMinSalary.toString();\r\n    // sliderOne.max = filterMaxSalary.toString();\r\n    // sliderTwo.max = filterMaxSalary.toString();\r\n    // sliderOne.value = filterMinSalary.toString();\r\n    // sliderTwo.value = filterMaxSalary.toString();\r\n    // slideOne();\r\n    // slideTwo();\r\n};\r\n\r\n// PAGES /////////////////////////////////////////////////////////////\r\nconst changePage = (pageBtn) => {\r\n    pageButtonsLoc.forEach((el) => {\r\n        el.classList.remove(\"active\");\r\n    });\r\n    pageBtn.classList.add(\"active\");\r\n    let firstRecord =\r\n        recordsOnPage * parseInt(pageBtn.innerText) - recordsOnPage;\r\n    let lastRecord = recordsOnPage * parseInt(pageBtn.innerText);\r\n\r\n    filtersON\r\n        ? createRecordBoxes(filteredRecordsArray_11, firstRecord, lastRecord)\r\n        : createRecordBoxes(allRecordsArray, firstRecord, lastRecord);\r\n    globActivePageNo = parseInt(pageBtn.innerText);\r\n    setTimeout(setParentIframeHeight(), 500);\r\n};\r\n\r\n// RWD /////////////////////////////////////////////////////////////\r\nfunction getWidth() {\r\n    return Math.max(\r\n        document.body.scrollWidth,\r\n        document.documentElement.scrollWidth,\r\n        document.body.offsetWidth,\r\n        document.documentElement.offsetWidth,\r\n        document.documentElement.clientWidth\r\n    );\r\n}\r\n\r\nfunction getHeight() {\r\n    return Math.max(\r\n        document.body.scrollHeight,\r\n        document.documentElement.scrollHeight,\r\n        document.body.offsetHeight,\r\n        document.documentElement.offsetHeight,\r\n        document.documentElement.clientHeight\r\n    );\r\n}\r\n\r\nlet maxPageBtns;\r\n\r\nif (getWidth() < 500) {\r\n    maxPageBtns = 6;\r\n}\r\nif (getWidth() >= 500 && getWidth() < 700) {\r\n    maxPageBtns = 8;\r\n}\r\nif (getWidth() > 700 && getWidth() < 900) {\r\n    maxPageBtns = 10;\r\n}\r\nif (getWidth() > 900 && getWidth() < 1024) {\r\n    maxPageBtns = 15;\r\n}\r\nif (getWidth() > 1024) {\r\n    maxPageBtns = 20;\r\n}\r\n\r\nlet pagesQuantityCalc;\r\n\r\nconst setPages = (recordsNumber) => {\r\n    pagesQuantityCalc = Math.ceil(recordsNumber / recordsOnPage);\r\n\r\n    if (pagesQuantityCalc > maxPageBtns) {\r\n        pagesSwitchLoc.replaceChildren();\r\n\r\n        for (n = 1; n <= maxPageBtns; n++) {\r\n            if (n === 1) {\r\n                pagesSwitchLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<div class=\"page active\">${n}</div>`\r\n                );\r\n            } else {\r\n                pagesSwitchLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<div class=\"page\">${n}</div>`\r\n                );\r\n            }\r\n        }\r\n        pagesSwitchLoc.insertAdjacentHTML(\r\n            \"beforeend\",\r\n            `<div class=\"next active\"><img src=\"./img/chevron-right.svg\" alt=\"\" /></div>`\r\n        );\r\n        let nextBtnLoc = document.querySelector(\".next\");\r\n        nextBtnLoc.addEventListener(\"click\", () => {\r\n            moveNextPagesBtns();\r\n        });\r\n    } else {\r\n        pagesSwitchLoc.replaceChildren();\r\n\r\n        for (n = 1; n <= pagesQuantityCalc; n++) {\r\n            if (n === 1) {\r\n                pagesSwitchLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<div class=\"page active\">${n}</div>`\r\n                );\r\n            } else {\r\n                pagesSwitchLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<div class=\"page\">${n}</div>`\r\n                );\r\n            }\r\n        }\r\n\r\n        pagesSwitchLoc.insertAdjacentHTML(\r\n            \"beforeend\",\r\n            `<div class=\"next\"><img src=\"\" alt=\"\" /></div>`\r\n        );\r\n    }\r\n\r\n    pagesSwitchLoc.insertAdjacentHTML(\r\n        \"afterbegin\",\r\n        `<div class=\"prev\"><img src=\"\" alt=\"\" /></div>`\r\n    );\r\n\r\n    pageButtonsLoc = document.querySelectorAll(\".page\");\r\n    pageButtonsLoc.forEach((el) => {\r\n        el.addEventListener(\"click\", (e) => {\r\n            changePage(e.target);\r\n        });\r\n    });\r\n};\r\n\r\n// create AWARDED RECORDS BOXES ///////////////////////////////////////////////\r\nconst createAwardedRecordBoxes = (recordsArray, filterConfigData) => {\r\n\r\n    awardedResultsLoc.replaceChildren();\r\n\r\n    let awardedRecordsArray = recordsArray.filter((elem) => {\r\n        return elem.awarded;  \r\n    });\r\n\r\n    console.log(awardedRecordsArray)\r\n\r\n    if (awardedRecordsArray.length > 0) {\r\n\r\n        if (filterConfigData.remote_filter) {\r\n            awardedRecordsArray = awardedRecordsArray.filter((elem) => {\r\n                return elem.remote;\r\n            });\r\n        }\r\n        \r\n        if (filterConfigData.language_filter.length > 0) {\r\n            filterAwarded(filterConfigData.language_filter, awardedRecordsArray, \"lang\");\r\n        }\r\n\r\n        if (filterConfigData.branche_filter.length > 0) {\r\n            filterAwarded(filterConfigData.branche_filter, awardedRecordsArray, \"branche\");\r\n        }\r\n\r\n        if (filterConfigData.location_country_filter.length > 0) {\r\n            filterAwarded(filterConfigData.location_country_filter, awardedRecordsArray, \"country\");\r\n        }\r\n\r\n        if (filterConfigData.location_city_filter.length > 0) {\r\n            filterAwarded(filterConfigData.location_city_filter, awardedRecordsArray, \"city\");\r\n        }\r\n\r\n        if (filterConfigData.recruitmentType_filter.length > 0) {\r\n            filterAwarded(filterConfigData.recruitmentType_filter, awardedRecordsArray, \"recruitmentType\");\r\n        }\r\n\r\n        for (i = firstRecordNumber; i < 10; i++) {\r\n            if (awardedRecordsArray[i]) {\r\n                let borderColorClass = \"\";\r\n                let textColorClass = \"\";\r\n\r\n                if (awardedRecordsArray[i].recruitmentType === \"PT\") {\r\n                    borderColorClass = \"pt-border\";\r\n                    textColorClass = \"pt-text\";\r\n                }\r\n                if (awardedRecordsArray[i].recruitmentType === \"RS\") {\r\n                    borderColorClass = \"rs-border\";\r\n                    textColorClass = \"rs-text\";\r\n                }\r\n                if (awardedRecordsArray[i].recruitmentType === \"WEW\") {\r\n                    borderColorClass = \"wew-border\";\r\n                    textColorClass = \"wew-text\";\r\n                }\r\n\r\n                let formaZatrudnienia = \"\";\r\n\r\n                if (awardedRecordsArray[i].jobForm) {\r\n                    awardedRecordsArray[i].jobForm.forEach(function (elem) {\r\n                        formaZatrudnienia =\r\n                            formaZatrudnienia + \"<p>\" + elem + \"</p>\";\r\n                    });\r\n                }\r\n\r\n                awardedResultsLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<a href=\"${\r\n                        awardedRecordsArray[i].url\r\n                    }\" target=\"_blank\"><div class=\"result ${borderColorClass}\">\r\n                <div class=\"top\">\r\n                \r\n                        <div class=\"lang\">\r\n                            <p>${awardedRecordsArray[i].lang}</p>\r\n                        </div>\r\n                        <div class=\"branche-name\">\r\n                            <div class=\"branche\">${\r\n                                awardedRecordsArray[i].branche\r\n                                    ? awardedRecordsArray[i].branche\r\n                                    : \"\"\r\n                            }</div>\r\n                            <div class=\"name ${textColorClass}\">${\r\n                        awardedRecordsArray[i].name\r\n                    }</div>\r\n                        </div>\r\n                    \r\n                </div>\r\n\r\n                <div class=\"bottom\">\r\n                    <div class=\"city-container\">\r\n                        <div class=\"city\"><img src=\"./img/location_dot.svg\">${\r\n                            awardedRecordsArray[i].city\r\n                        }</div></div>\r\n                        <div class=\"details-container\">\r\n                        ${\r\n                            awardedRecordsArray[i].remote\r\n                                ? \"<div class='remote'>zdalna</div>\"\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            awardedRecordsArray[i].relocation\r\n                                ? \"<div class='relocation'>relocation</div>\"\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            awardedRecordsArray[i].jobType\r\n                                ? \"<div class='jobtype'>\" +\r\n                                awardedRecordsArray[i].jobType +\r\n                                \"</div>\"\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            awardedRecordsArray[i].visibleRate\r\n                                ? awardedRecordsArray[i].salaryFrom &&\r\n                                awardedRecordsArray[i].salaryTo\r\n                                    ? \"<div class='salary'>\" +\r\n                                    awardedRecordsArray[i].salaryFrom +\r\n                                    \" - \" +\r\n                                    awardedRecordsArray[i].salaryTo +\r\n                                    \"</div>\"\r\n                                    : \"\"\r\n                                : \"\"\r\n                        }\r\n                        <div class=\"employmentform\">${formaZatrudnienia}</div>\r\n                        </div>\r\n                    \r\n                </div>\r\n\r\n                <div class=\"ribbon-wrap\">\r\n                        <div class=\"ribbon\">\r\n                                <img src=\"./img/star.svg\" alt=\"\">\r\n                                <img src=\"./img/star.svg\" alt=\"\">\r\n                                <img src=\"./img/star.svg\" alt=\"\">\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n\r\n                \r\n\r\n            </div></a>`\r\n                );\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n// show RECORDS NUMBER ///////////////////////////////////////////////\r\nconst summariseDownload = (recordsNumber) => {\r\n    recNumLoc.innerText = `Znaleziono ${recordsNumber} ogłoszeń`;\r\n    if (!recordsNumber) {\r\n        noResultsLoc.classList.add(\"active\");\r\n    } else {\r\n        noResultsLoc.classList.remove(\"active\");\r\n    }\r\n};\r\n\r\n// create FILTER DATA from API data ///////////////////////////////////////////////\r\nconst createDataForFilters = (\r\n    branche,\r\n    jobForm,\r\n    jobType,\r\n    lang,\r\n    visibleRate,\r\n    salaryFrom,\r\n    salaryTo,\r\n    country,\r\n    city,\r\n    lati,\r\n    longi\r\n) => {\r\n   \r\n    if (filterBranchesList.indexOf(branche) === -1 && branche !== undefined) {\r\n        if (filterConfigData.branche_filter.length) {\r\n            if (filterConfigData.branche_filter.indexOf(branche) !== -1) {\r\n                filterBranchesList.push(branche);\r\n            }\r\n        } else {\r\n            filterBranchesList.push(branche);\r\n        }\r\n       \r\n    }\r\n\r\n    if (jobForm) {\r\n        jobForm.forEach(function (elem) {\r\n            if (filterJobFormList.indexOf(elem) === -1) {\r\n                filterJobFormList.push(elem);\r\n            }\r\n        });\r\n    }\r\n\r\n    if (filterJobTypeList.indexOf(jobType) === -1 && jobType !== undefined) {\r\n        filterJobTypeList.push(jobType);\r\n    }\r\n\r\n    if (filterLangList.indexOf(lang) === -1) {\r\n\r\n        if (filterConfigData.language_filter.length) {\r\n            if (filterConfigData.language_filter.indexOf(lang) !== -1) {\r\n                filterLangList.push(lang);\r\n            }\r\n        } else {\r\n            filterLangList.push(lang);\r\n        }\r\n    }\r\n\r\n    // if (visibleRate) {\r\n    //     if (salaryFrom < filterMinSalary) {\r\n    //         filterMinSalary = salaryFrom;\r\n    //     }\r\n    //     if (salaryTo > filterMaxSalary) {\r\n    //         filterMaxSalary = salaryTo;\r\n    //     }\r\n    // }\r\n\r\n    if (filterConfigData.location_country_filter.length) {\r\n        \r\n        if (filterConfigData.location_country_filter.indexOf(country) !== -1) {\r\n            if (filterCountriesList[country]) {\r\n                if (\r\n                    filterCountriesList[country].findIndex(\r\n                        (arr_el) => arr_el.city === city\r\n                    ) === -1\r\n                ) {\r\n                    if (filterConfigData.location_city_filter.length) {\r\n                        if (filterConfigData.location_city_filter.indexOf(city) !== -1) {\r\n                            filterCountriesList[country].push({\r\n                                city: city,\r\n                                lati: lati,\r\n                                longi: longi,\r\n                            });\r\n                        }\r\n                    } else {\r\n                        filterCountriesList[country].push({\r\n                            city: city,\r\n                            lati: lati,\r\n                            longi: longi,\r\n                        });\r\n                    }\r\n                }\r\n            } else {\r\n                filterCountriesList[country] = [];\r\n                if (filterConfigData.location_city_filter.length) {\r\n                    if (filterConfigData.location_city_filter.indexOf(city) !== -1) {\r\n                        filterCountriesList[country].push({\r\n                            city: city,\r\n                            lati: lati,\r\n                            longi: longi,\r\n                        });\r\n                    }\r\n                } else {\r\n                    filterCountriesList[country].push({\r\n                        city: city,\r\n                        lati: lati,\r\n                        longi: longi,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n    } else {\r\n        \r\n        if (filterCountriesList[country]) {\r\n            if (\r\n                filterCountriesList[country].findIndex(\r\n                    (arr_el) => arr_el.city === city\r\n                ) === -1\r\n            ) {\r\n                filterCountriesList[country].push({\r\n                    city: city,\r\n                    lati: lati,\r\n                    longi: longi,\r\n                });\r\n            }\r\n        } else {\r\n            filterCountriesList[country] = [];\r\n            filterCountriesList[country].push({\r\n                city: city,\r\n                lati: lati,\r\n                longi: longi,\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\n// create OBJECTS ARRAY from Raw API JSON ///////////////////////////////////////////////\r\nconst reworkData = (rawAPIArray) => {\r\n    rawAPIArray.forEach((el) => {\r\n        if (el.options.job_location) {\r\n            parsedJobLocation = JSON.parse(el.options.job_location);\r\n        }\r\n\r\n        allRecordsArray.push({\r\n            url: el.url,\r\n            name: el.advert.name,\r\n            branche: el.options.branches,\r\n            lang: el.advert.language,\r\n            jobType: el.options.job_type,\r\n            visibleRate: parseInt(el.options._Widoczna_stawka),\r\n            salaryFrom: parseInt(el.options._spodziewane_wynagrodzenie_od),\r\n            salaryTo: parseInt(el.options._spodziewane_wynagrodzenie_do),\r\n            remote: el.options.remote,\r\n            relocation: el.options._relokacja,\r\n            recruitmentType: el.options._rekrutacja_rodzaj,\r\n            jobForm: el.options._forma_zatrudnienia,\r\n            country: parsedJobLocation.country,\r\n            city: parsedJobLocation.locality,\r\n            lati: parseFloat(parsedJobLocation.latitude),\r\n            longi: parseFloat(parsedJobLocation.longitude),\r\n            description: el.advert.values,\r\n            awarded: el.awarded,\r\n        });\r\n\r\n        createDataForFilters(\r\n            el.options.branches,\r\n            el.options._forma_zatrudnienia,\r\n            el.options.job_type,\r\n            el.advert.language,\r\n            parseInt(el.options._Widoczna_stawka),\r\n            parseInt(el.options._spodziewane_wynagrodzenie_od),\r\n            parseInt(el.options._spodziewane_wynagrodzenie_do),\r\n            parsedJobLocation.country,\r\n            parsedJobLocation.locality,\r\n            parseFloat(parsedJobLocation.latitude),\r\n            parseFloat(parsedJobLocation.longitude)\r\n        );\r\n    });\r\n};\r\n\r\n// gets DATA FROM API ///////////////////////////////////////////////\r\nconst getAPI = (apiPage) => {\r\n    const response = fetch(\r\n        \"https://grupaprogres.traffit.com/public/job_posts/published\",\r\n        {\r\n            mode: \"cors\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"X-Request-Page-Size\": \"100\",\r\n                \"X-Request-Current-Page\": apiPage,\r\n                \"X-Request-Sort\": '{\"sort_by\": \"id\", \"direction\": \"ASC\"}',\r\n            },\r\n        }\r\n    );\r\n\r\n    return response;\r\n};\r\n\r\nconst loopOnAPI = (jsonData, filterConfigData) => {\r\n    if (jsonData.length > 0) {\r\n        rawAPIArray = rawAPIArray.concat(jsonData);\r\n        apiPage++;\r\n        console.log(\"rawAPIArray\", rawAPIArray)\r\n        createRecordsObjFromAPI(apiPage, filterConfigData);\r\n    } else {\r\n        reworkData(rawAPIArray);\r\n        console.log(\"allRecordsArray\", allRecordsArray)\r\n        recordsNumber = rawAPIArray.length;\r\n        console.log(\"recordsNumber\", recordsNumber)\r\n        // summariseDownload(recordsNumber); // not used\r\n        createAwardedRecordBoxes(allRecordsArray, filterConfigData); // obecnie brak wyróżnionych ogłoszeń - wymagane ostylowanie css gdy się pojawią\r\n        setPages(recordsNumber); // trzeba dokończyć listenery na utworzonych buttonach\r\n        createFilterLists(filterConfigData);\r\n        // dropDownBtnStart();\r\n        // pagesContainerStart();\r\n        createFilteredRecordsArray();\r\n\r\n        \r\n    }\r\n};\r\n\r\nasync function createRecordsObjFromAPI(apiPage, filterConfigData) {\r\n    const rawData = await getAPI(apiPage);\r\n    const jsonData = await rawData.json();\r\n    loopOnAPI(jsonData, filterConfigData);\r\n}\r\n\r\n// consider configuration filters ////////////////////////\r\nconst getConfigFilter = () => {\r\n    const response = fetch(\"./config/config.json\");\r\n    return response;\r\n};\r\n\r\nasync function readConfigFilter() {\r\n    try {\r\n        const rawData = await getConfigFilter();\r\n        filterConfigData = await rawData.json();\r\n        console.log(\"filterConfigData\", filterConfigData)\r\n        createRecordsObjFromAPI(apiPage, filterConfigData);\r\n    } catch (e) {\r\n        console.error(e);\r\n        createRecordsObjFromAPI(apiPage);\r\n    }\r\n}\r\n\r\nreadConfigFilter();"]}