{"version":3,"sources":["main.js"],"names":["cityListBtnLoc","document","querySelector","cityListLoc","distanceListBtnLoc","distanceListLoc","sectorListBtnLoc","sectorListLoc","employmentFormListBtnLoc","employmentFormListLoc","workingHoursListBtnLoc","workingHoursListLoc","languageListBtnLoc","languageListLoc","awardedResultsLoc","recordsOnPageLoc","pagesSwitchLoc","brancheWrapperLoc","branchesLoc","jobFormLoc","addEventListener","classList","toggle","filterConfigData","apiPage","rawAPIArray","allRecordsArray","recordsNumber","recordsOnPage","filtersON","filterBranchesList","filterJobFormList","filterListMaxHeight","value","createFilteredRecordsArray","branchesChildrenLoc","querySelectorAll","jobFormChildrenLoc","jobTypeChildrenLoc","langChildrenLoc","countriesChildrenLoc","citiesChildrenLoc","filteredRecordsArray","selectedBranches","branche_filter","length","Array","from","filter","elem","selected","map","filteredRecordsArray_1","forEach","el","index","addFlag","selectedFiltr","branche","push","selectedJobForms","filteredRecordsArray_2","jobForm","indexOf","selectedjobTypes","filteredRecordsArray_3","jobType","selectedLangs","language_filter","selectedValOne","selectedValTwo","filteredRecordsArray_4","lang","salaryMarkLoc","checked","parseInt","displayValOne","innerText","displayValTwo","filteredRecordsArray_5","visibleRate","salaryTo","salaryFrom","selectedCountry","location_country_filter","locationMarkLoc","filteredRecordsArray_6","country","selectedCity","location_city_filter","filteredRecordsArray_7","lati","longi","min_lati","max_lati","min_longi","max_longi","selectedDistance","locationDotLoc","city","Math","cos","PI","filteredRecordsArray_8","remoteLoc","remote","filteredRecordsArray_9","relocationLoc","relocation","filteredRecordsArray_10","searchText","searchInputLoc","position","description","field_id","toLowerCase","search","name","filteredRecordsArray_11","selectedRecruitmentType","recruitmentType_filter","recruitmentType","summariseDownload","createRecordBoxes","setPages","hideFilter","setTimeout","setParentIframeHeight","pagesContainerStart","pagesContainer","add","dropDownBtnStart","dropDownLoc","showHideFilters","createFilterLists","branche_visible","sort","a","b","localeCompare","rowHeight","insertAdjacentHTML","console","log","changePage","pageBtn","pageButtonsLoc","remove","firstRecord","lastRecord","globActivePageNo","getWidth","max","body","scrollWidth","documentElement","offsetWidth","clientWidth","getHeight","scrollHeight","offsetHeight","clientHeight","maxPageBtns","pagesQuantityCalc","ceil","replaceChildren","n","moveNextPagesBtns","e","target","createAwardedRecordBoxes","recordsArray","awardedRecordsArray","awarded","remote_filter","filterAwarded","i","firstRecordNumber","borderColorClass","textColorClass","formaZatrudnienia","url","recNumLoc","noResultsLoc","createDataForFilters","undefined","reworkData","options","job_location","parsedJobLocation","JSON","parse","advert","branches","language","job_type","_Widoczna_stawka","_spodziewane_wynagrodzenie_od","_spodziewane_wynagrodzenie_do","_relokacja","_rekrutacja_rodzaj","_forma_zatrudnienia","locality","parseFloat","latitude","longitude","values","getAPI","fetch","mode","headers","loopOnAPI","jsonData","concat","createRecordsObjFromAPI","async","rawData","json","getConfigFilter","readConfigFilter","error"],"mappings":"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","file":"all.min.js","sourcesContent":["const cityListBtnLoc = document.querySelector(\".city .arrow-down\");\r\nconst cityListLoc = document.querySelector(\".city .list\");\r\nconst distanceListBtnLoc = document.querySelector(\".distance .arrow-down\");\r\nconst distanceListLoc = document.querySelector(\".distance .list\");\r\nconst sectorListBtnLoc = document.querySelector(\".sector .arrow-down\");\r\nconst sectorListLoc = document.querySelector(\".sector .list\");\r\nconst employmentFormListBtnLoc = document.querySelector(\".employment-form .arrow-down\");\r\nconst employmentFormListLoc = document.querySelector(\".employment-form .list\");\r\nconst workingHoursListBtnLoc = document.querySelector(\".working-hours .arrow-down\");\r\nconst workingHoursListLoc = document.querySelector(\".working-hours .list\");\r\nconst languageListBtnLoc = document.querySelector(\".language .arrow-down\");\r\nconst languageListLoc = document.querySelector(\".language .list\");\r\n\r\nconst awardedResultsLoc = document.querySelector(\".awarded\");\r\nconst recordsOnPageLoc = document.querySelector(\".records-on-page\");\r\nconst pagesSwitchLoc = document.querySelector(\".pages\");\r\n\r\nconst brancheWrapperLoc = document.querySelector(\".sector\");\r\nconst branchesLoc = document.querySelector(\".sector ul\");\r\nconst jobFormLoc = document.querySelector(\".employment-form ul\"); \r\n\r\ncityListBtnLoc.addEventListener(\"click\", () => {\r\n    cityListLoc.classList.toggle(\"expand\");\r\n})\r\n\r\ndistanceListBtnLoc.addEventListener(\"click\", () => {\r\n    distanceListLoc.classList.toggle(\"expand\");\r\n})\r\n\r\nsectorListBtnLoc.addEventListener(\"click\", () => {\r\n    sectorListLoc.classList.toggle(\"expand\");\r\n})\r\n\r\nemploymentFormListBtnLoc.addEventListener(\"click\", () => {\r\n    employmentFormListLoc.classList.toggle(\"expand\");\r\n})\r\n\r\nworkingHoursListBtnLoc.addEventListener(\"click\", () => {\r\n    workingHoursListLoc.classList.toggle(\"expand\");\r\n})\r\n\r\nlanguageListBtnLoc.addEventListener(\"click\", () => {\r\n    languageListLoc.classList.toggle(\"expand\");\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet filterConfigData = {};\r\nlet apiPage = 1;\r\nlet rawAPIArray = [];\r\nlet allRecordsArray = [];\r\nlet recordsNumber = 0;\r\nlet recordsOnPage = 20;\r\nlet filtersON = false;\r\nlet filterBranchesList = [];\r\nlet filterJobFormList = [];\r\nlet filterListMaxHeight = 0;\r\n\r\nrecordsOnPageLoc.value = recordsOnPage;\r\n\r\n// filter the data to create FILTERED OBJECTS ARRAY ///////////////////////////////\r\nconst createFilteredRecordsArray = () => {\r\n    const branchesChildrenLoc = document.querySelectorAll(\".branches option\");\r\n    const jobFormChildrenLoc = document.querySelectorAll(\".job-form option\");\r\n    const jobTypeChildrenLoc = document.querySelectorAll(\".job-type option\");\r\n    const langChildrenLoc = document.querySelectorAll(\".lang option\");\r\n    const countriesChildrenLoc = document.querySelectorAll(\".countries option\");\r\n    const citiesChildrenLoc = document.querySelectorAll(\".cities option\");\r\n\r\n    let filteredRecordsArray = allRecordsArray;\r\n\r\n    // selectedBranches ////////////////\r\n\r\n    let selectedBranches = [];\r\n\r\n    if (\r\n        filterConfigData.branche_filter.length \r\n        // && !filterConfigData.branche_visible\r\n    ) {\r\n        selectedBranches = filterConfigData.branche_filter;\r\n    } else {\r\n        selectedBranches = Array.from(branchesChildrenLoc)\r\n            .filter(function (elem) {\r\n                return elem.selected;\r\n            })\r\n            .map(function (elem) {\r\n                return elem.value;\r\n            });\r\n    }\r\n\r\n    let filteredRecordsArray_1 = [];\r\n\r\n    if (selectedBranches.length !== 0) {\r\n        filteredRecordsArray.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            selectedBranches.forEach((selectedFiltr) => {\r\n                if (el.branche === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_1.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_1 = filteredRecordsArray;\r\n    }\r\n\r\n    // selectedJobForms ////////////////\r\n\r\n    let selectedJobForms = Array.from(jobFormChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let filteredRecordsArray_2 = [];\r\n\r\n    if (selectedJobForms.length !== 0) {\r\n        filteredRecordsArray_1.forEach((el, index) => {\r\n            if (el.jobForm) {\r\n                let addFlag = false;\r\n\r\n                selectedJobForms.forEach((selectedFiltr) => {\r\n                    if (el.jobForm.indexOf(selectedFiltr) !== -1) {\r\n                        addFlag = true;\r\n                    }\r\n                });\r\n\r\n                if (addFlag) {\r\n                    filteredRecordsArray_2.push(el);\r\n                }\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_2 = filteredRecordsArray_1;\r\n    }\r\n\r\n    // selectedJobTypes////////////////\r\n\r\n    let selectedjobTypes = Array.from(jobTypeChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.selected;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let filteredRecordsArray_3 = [];\r\n\r\n    if (selectedjobTypes.length !== 0) {\r\n        filteredRecordsArray_2.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            selectedjobTypes.forEach((selectedFiltr) => {\r\n                if (el.jobType === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_3.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_3 = filteredRecordsArray_2;\r\n    }\r\n\r\n    // selectedLangs ////////////////\r\n    let selectedLangs = [];\r\n\r\n    if (\r\n        filterConfigData.language_filter.length \r\n        // && !filterConfigData.language_visible\r\n    ) {\r\n        selectedLangs = filterConfigData.language_filter;\r\n    } else {\r\n        selectedLangs = Array.from(langChildrenLoc)\r\n            .filter(function (elem) {\r\n                return elem.selected;\r\n            })\r\n            .map(function (elem) {\r\n                return elem.value;\r\n            });\r\n    }\r\n\r\n    let filteredRecordsArray_4 = [];\r\n\r\n    if (selectedLangs.length !== 0) {\r\n        filteredRecordsArray_3.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            selectedLangs.forEach((selectedFiltr) => {\r\n                if (el.lang === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_4.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_4 = filteredRecordsArray_3;\r\n    }\r\n\r\n    // selectedSalary ////////////////\r\n\r\n    let selectedValOne;\r\n    let selectedValTwo;\r\n    if (salaryMarkLoc.checked) {\r\n        selectedValOne = parseInt(displayValOne.innerText);\r\n        selectedValTwo = parseInt(displayValTwo.innerText);\r\n    }\r\n\r\n    let filteredRecordsArray_5 = [];\r\n\r\n    if (salaryMarkLoc.checked) {\r\n        filteredRecordsArray_4.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            if (el.visibleRate) {\r\n                if (el.salaryTo && el.salaryFrom) {\r\n                    if (\r\n                        el.salaryTo >= selectedValOne &&\r\n                        el.salaryFrom <= selectedValTwo\r\n                    ) {\r\n                        addFlag = true;\r\n                    }\r\n                }\r\n                if (el.salaryTo && !el.salaryFrom) {\r\n                    if (el.salaryTo >= selectedValOne) {\r\n                        addFlag = true;\r\n                    }\r\n                }\r\n                if (!el.salaryTo && el.salaryFrom) {\r\n                    if (el.salaryFrom <= selectedValTwo) {\r\n                        addFlag = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_5.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_5 = filteredRecordsArray_4;\r\n    }\r\n\r\n    // selectedCountry ////////////////\r\n\r\n    let selectedCountry = [];\r\n\r\n    if (\r\n        filterConfigData.location_country_filter.length \r\n        // && !filterConfigData.location_visible\r\n    ) {\r\n        selectedCountry = filterConfigData.location_country_filter;\r\n    } else {\r\n        if (locationMarkLoc.checked) {\r\n            selectedCountry = Array.from(countriesChildrenLoc)\r\n                .filter(function (elem) {\r\n                    if (elem.value) {\r\n                        return elem.selected;\r\n                    }\r\n                })\r\n                .map(function (elem) {\r\n                    if (elem.value) {\r\n                        return elem.value;\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    let filteredRecordsArray_6 = [];\r\n\r\n    if (\r\n        locationMarkLoc.checked ||\r\n        (filterConfigData.location_country_filter.length \r\n            // && !filterConfigData.location_visible\r\n            )\r\n    ) {\r\n        if (selectedCountry.length) {\r\n            filteredRecordsArray_5.forEach((el, index) => {\r\n                let addFlag = false;\r\n\r\n                selectedCountry.forEach((selectedFiltr) => {\r\n                    if (el.country === selectedFiltr) {\r\n                        addFlag = true;\r\n                    }\r\n                });\r\n\r\n                if (addFlag) {\r\n                    filteredRecordsArray_6.push(el);\r\n                }\r\n            });\r\n        } else {\r\n            filteredRecordsArray_6 = filteredRecordsArray_5;\r\n        }\r\n    } else {\r\n        filteredRecordsArray_6 = filteredRecordsArray_5;\r\n    }\r\n\r\n    // selectedCity & selectedDistance ////////////////\r\n\r\n    let selectedCity = [];\r\n\r\n    if (\r\n        filterConfigData.location_city_filter.length\r\n        // && !filterConfigData.location_visible\r\n    ) {\r\n        selectedCity = filterConfigData.location_city_filter;\r\n    } else {\r\n        if (locationMarkLoc.checked) {\r\n            selectedCity = Array.from(citiesChildrenLoc)\r\n                .filter(function (elem) {\r\n                    if (elem.value) {\r\n                        return elem.selected;\r\n                    }\r\n                })\r\n                .map(function (elem) {\r\n                    if (elem.value) {\r\n                        return elem.value;\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    let filteredRecordsArray_7 = [];\r\n\r\n    if (\r\n        locationMarkLoc.checked ||\r\n        (filterConfigData.location_city_filter.length \r\n            // && !filterConfigData.location_visible\r\n            )\r\n    ) {\r\n        if (selectedCity.length) {\r\n            let selectedDistance = 0;\r\n\r\n            selectedDistance = parseInt(locationDotLoc.value);\r\n\r\n            let lati;\r\n            let longi;\r\n            let min_lati;\r\n            let max_lati;\r\n            let min_longi;\r\n            let max_longi;\r\n\r\n            filteredRecordsArray_6.forEach((el, index) => {\r\n                if (el.city === selectedCity[0]) {\r\n                    lati = el.lati;\r\n                    longi = el.longi;\r\n\r\n                    min_lati = lati - selectedDistance * 0.009044;\r\n                    max_lati = lati + selectedDistance * 0.009044;\r\n                    min_longi =\r\n                        longi -\r\n                        (selectedDistance * 0.0089831) /\r\n                            Math.cos((lati * Math.PI) / 180);\r\n                    max_longi =\r\n                        longi +\r\n                        (selectedDistance * 0.0089831) /\r\n                            Math.cos((lati * Math.PI) / 180);\r\n                }\r\n            });\r\n\r\n            filteredRecordsArray_6.forEach((el, index) => {\r\n                let addFlag = false;\r\n\r\n                if (\r\n                    el.lati <= max_lati &&\r\n                    el.lati >= min_lati &&\r\n                    el.longi <= max_longi &&\r\n                    el.longi >= min_longi\r\n                ) {\r\n                    addFlag = true;\r\n                }\r\n\r\n                if (addFlag) {\r\n                    filteredRecordsArray_7.push(el);\r\n                }\r\n            });\r\n        } else {\r\n            filteredRecordsArray_7 = filteredRecordsArray_6;\r\n        }\r\n    } else {\r\n        filteredRecordsArray_7 = filteredRecordsArray_6;\r\n    }\r\n\r\n    // selectedRemote ////////////////\r\n\r\n    let filteredRecordsArray_8 = [];\r\n\r\n    if (\r\n        remoteLoc.checked ||\r\n        (filterConfigData.remote_filter \r\n            // && !filterConfigData.remote_visible\r\n            )\r\n    ) {\r\n        filteredRecordsArray_7.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            if (el.remote) {\r\n                addFlag = true;\r\n            }\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_8.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_8 = filteredRecordsArray_7;\r\n    }\r\n\r\n    // selectedRelocation ////////////////\r\n\r\n    let filteredRecordsArray_9 = [];\r\n\r\n    if (relocationLoc.checked) {\r\n        filteredRecordsArray_8.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            if (el.relocation) {\r\n                addFlag = true;\r\n            }\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_9.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_9 = filteredRecordsArray_8;\r\n    }\r\n\r\n    // searchText ////////////////\r\n\r\n    let filteredRecordsArray_10 = [];\r\n\r\n    let searchText = searchInputLoc.value;\r\n\r\n    if (searchText) {\r\n        filteredRecordsArray_9.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            let position;\r\n\r\n            el.description.forEach(function (elem) {\r\n                if (elem.value && elem.field_id !== \"geolocation\") {\r\n                    position = elem.value\r\n                        .toLowerCase()\r\n                        .search(searchText.toLowerCase());\r\n                    if (position !== -1) {\r\n                        addFlag = true;\r\n                    }\r\n                }\r\n            });\r\n\r\n            position = el.name.toLowerCase().search(searchText.toLowerCase());\r\n            if (position !== -1) {\r\n                addFlag = true;\r\n            }\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_10.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_10 = filteredRecordsArray_9;\r\n    }\r\n\r\n    // selectedRecruitmentType (coloring of records) ////////////////\r\n    filteredRecordsArray_11 = [];\r\n    \r\n    let selectedRecruitmentType = [];\r\n\r\n    if (filterConfigData.recruitmentType_filter.length) {\r\n        selectedRecruitmentType = filterConfigData.recruitmentType_filter;\r\n    }\r\n\r\n    if (selectedRecruitmentType.length !== 0) {\r\n        filteredRecordsArray_10.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            selectedRecruitmentType.forEach((selectedFiltr) => {\r\n                if (el.recruitmentType === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_11.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_11 = filteredRecordsArray_10;\r\n    }\r\n\r\n    recordsNumber = filteredRecordsArray_11.length;\r\n    summariseDownload(recordsNumber);\r\n    createRecordBoxes(filteredRecordsArray_11, 0, recordsOnPage);\r\n    setPages(recordsNumber);\r\n    filtersON = true;\r\n    hideFilter();\r\n    \r\n    setTimeout(setParentIframeHeight, 1000);\r\n    \r\n};\r\n\r\nconst pagesContainerStart = () => {\r\n    pagesContainer.classList.add(\"active\");\r\n};\r\n\r\nconst dropDownBtnStart = () => {\r\n    dropDownLoc.addEventListener(\"click\", showHideFilters);\r\n\r\n    dropDownLoc.classList.add(\"active\");\r\n};\r\n\r\n// create HTML FILTERS LISTS //////////////////////////////////////////////////////\r\nconst createFilterLists = (filterConfigData) => {\r\n\r\n    // if (!filterConfigData.salary_visible) {\r\n    //     salaryLoc.classList.add(\"unactive\");\r\n    // }\r\n\r\n    // if (!filterConfigData.relocation_visible) {\r\n    //     relocationWrapperLoc.classList.add(\"unactive\");\r\n    // }\r\n\r\n    // if (!filterConfigData.language_visible) {\r\n    //     langWrapperLoc.classList.add(\"unactive\");\r\n    // }\r\n\r\n    // if (!filterConfigData.remote_visible) {\r\n    //     remoteWrapperLoc.classList.add(\"unactive\");\r\n    // }\r\n\r\n    // if (!filterConfigData.location_visible) {\r\n    //     locWrapperLoc.classList.add(\"unactive\");\r\n    // }\r\n\r\n    if (!filterConfigData.branche_visible) {\r\n        brancheWrapperLoc.classList.add(\"unactive\");\r\n    }\r\n\r\n    // let isSamsungBrowser = navigator.userAgent.match(/SamsungBrowser/i);\r\n    // let isChromeBrowser = navigator.userAgent.match(/Chrome/i);\r\n\r\n    if (filterBranchesList.length > 0) {\r\n        filterBranchesList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n        rowHeight = filterBranchesList.length * 21 + 3;\r\n        filterListMaxHeight = rowHeight;\r\n        // if (getMobileOperatingSystem() === \"unknown\") {\r\n            // brancheListLoc.style.height = String(rowHeight) + \"px\";\r\n        // } else if (isSamsungBrowser || isChromeBrowser) {\r\n        //     branchesLoc.style.height = \"50px\";\r\n        // } else {\r\n        //     branchesLoc.style.height = String(rowHeight) + \"px\";\r\n        // }\r\n        \r\n        filterBranchesList.forEach(function (el) {\r\n            branchesLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"sector-${el}\" name=\"sector-${el}\" value=\"sector-${el}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"sector-${el}\">${el}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n            \r\n        });\r\n    }\r\n\r\n    if (filterJobFormList.length > 0) {\r\n        console.log(filterJobFormList)\r\n        filterJobFormList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n        rowHeight = filterJobFormList.length * 21 + 3;\r\n        // if (getMobileOperatingSystem() === \"unknown\") {\r\n            // jobFormLoc.style.height = String(rowHeight) + \"px\";\r\n        // } else if (isSamsungBrowser || isChromeBrowser) {\r\n        //     jobFormLoc.style.height = \"50px\";\r\n        // } else {\r\n        //     jobFormLoc.style.height = String(rowHeight) + \"px\";\r\n        // }\r\n        filterJobFormList.forEach(function (el) {\r\n            jobFormLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"employment-form-${el}\" name=\"employment-form-${el}\" value=\"employment-form-${el}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"employment-form-${el}\">${el}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n        });\r\n    }\r\n\r\n    // if (filterJobTypeList.length > 0) {\r\n    //     filterJobTypeList.sort(function (a, b) {\r\n    //         return a.localeCompare(b);\r\n    //     });\r\n    //     rowHeight = filterJobTypeList.length * 21 + 3;\r\n    //     // if (getMobileOperatingSystem() === \"unknown\") {\r\n    //         jobTypeLoc.style.height = String(rowHeight) + \"px\";\r\n    //     // } else if (isSamsungBrowser || isChromeBrowser) {\r\n    //     //     jobTypeLoc.style.height = \"50px\";\r\n    //     // } else {\r\n    //     //     jobTypeLoc.style.height = String(rowHeight) + \"px\";\r\n    //     // }\r\n    //     filterJobTypeList.forEach(function (el) {\r\n    //         jobTypeLoc.insertAdjacentHTML(\r\n    //             \"beforeend\",\r\n    //             `<option value=\"${el}\">${el}</option>`\r\n    //         );\r\n    //     });\r\n    // }\r\n\r\n    // if (filterLangList.length > 0) {\r\n    //     filterLangList.sort(function (a, b) {\r\n    //         return a.localeCompare(b);\r\n    //     });\r\n    //     rowHeight = filterLangList.length * 21 + 3;\r\n    //     // if (getMobileOperatingSystem() === \"unknown\") {\r\n    //         langLoc.style.height = String(rowHeight) + \"px\";\r\n    //     // } else if (isSamsungBrowser || isChromeBrowser) {\r\n    //     //     langLoc.style.height = \"50px\";\r\n    //     // } else {\r\n    //     //     langLoc.style.height = String(rowHeight) + \"px\";\r\n    //     // }\r\n    //     filterLangList.forEach(function (el) {\r\n    //         langLoc.insertAdjacentHTML(\r\n    //             \"beforeend\",\r\n    //             `<option value=\"${el}\">${el}</option>`\r\n    //         );\r\n    //     });\r\n    // }\r\n\r\n    // if (Object.keys(filterCountriesList).length > 0) {\r\n    //     countriesLoc.insertAdjacentHTML(\r\n    //         \"beforeend\",\r\n    //         `<option value=\"\" class=\"placeholder\">Państwo</option>`\r\n    //     );\r\n\r\n    //     citiesLoc.insertAdjacentHTML(\r\n    //         \"beforeend\",\r\n    //         `<option value=\"\" class=\"placeholder\">Miasto</option>`\r\n    //     );\r\n\r\n    //     function compare(a, b) {\r\n    //         return a.city.localeCompare(b.city);\r\n    //     }\r\n\r\n    //     for (let key in filterCountriesList) {\r\n    //         filterCountriesList[key].sort(compare);\r\n    //     }\r\n\r\n    //     filterCountriesList = Object.keys(filterCountriesList)\r\n    //         .sort()\r\n    //         .reduce((accumulator, key) => {\r\n    //             accumulator[key] = filterCountriesList[key];\r\n    //             return accumulator;\r\n    //         }, {});\r\n\r\n    //     let allCitiesObj = [];\r\n    //     for (let key in filterCountriesList) {\r\n    //         countriesLoc.insertAdjacentHTML(\r\n    //             \"beforeend\",\r\n    //             `<option value=\"${key}\">${key}</option>`\r\n    //         );\r\n    //         allCitiesObj = allCitiesObj.concat(filterCountriesList[key]);\r\n    //     }\r\n\r\n    //     let allCitiesArray = [];\r\n    //     allCitiesObj.forEach((el) => {\r\n    //         allCitiesArray.push(el.city);\r\n    //     });\r\n\r\n    //     allCitiesArray.sort(function (a, b) {\r\n    //         return a.localeCompare(b);\r\n    //     });\r\n\r\n    //     allCitiesArray.forEach(function (el) {\r\n    //         citiesLoc.insertAdjacentHTML(\r\n    //             \"beforeend\",\r\n    //             `<option value=\"${el}\" class=\"active\">${el} </option>`\r\n    //         );\r\n    //     });\r\n    // }\r\n\r\n    // sliderOne.min = filterMinSalary.toString();\r\n    // sliderTwo.min = filterMinSalary.toString();\r\n    // sliderOne.max = filterMaxSalary.toString();\r\n    // sliderTwo.max = filterMaxSalary.toString();\r\n    // sliderOne.value = filterMinSalary.toString();\r\n    // sliderTwo.value = filterMaxSalary.toString();\r\n    // slideOne();\r\n    // slideTwo();\r\n};\r\n\r\n// PAGES /////////////////////////////////////////////////////////////\r\nconst changePage = (pageBtn) => {\r\n    pageButtonsLoc.forEach((el) => {\r\n        el.classList.remove(\"active\");\r\n    });\r\n    pageBtn.classList.add(\"active\");\r\n    let firstRecord =\r\n        recordsOnPage * parseInt(pageBtn.innerText) - recordsOnPage;\r\n    let lastRecord = recordsOnPage * parseInt(pageBtn.innerText);\r\n\r\n    filtersON\r\n        ? createRecordBoxes(filteredRecordsArray_11, firstRecord, lastRecord)\r\n        : createRecordBoxes(allRecordsArray, firstRecord, lastRecord);\r\n    globActivePageNo = parseInt(pageBtn.innerText);\r\n    setTimeout(setParentIframeHeight(), 500);\r\n};\r\n\r\n// RWD /////////////////////////////////////////////////////////////\r\nfunction getWidth() {\r\n    return Math.max(\r\n        document.body.scrollWidth,\r\n        document.documentElement.scrollWidth,\r\n        document.body.offsetWidth,\r\n        document.documentElement.offsetWidth,\r\n        document.documentElement.clientWidth\r\n    );\r\n}\r\n\r\nfunction getHeight() {\r\n    return Math.max(\r\n        document.body.scrollHeight,\r\n        document.documentElement.scrollHeight,\r\n        document.body.offsetHeight,\r\n        document.documentElement.offsetHeight,\r\n        document.documentElement.clientHeight\r\n    );\r\n}\r\n\r\nlet maxPageBtns;\r\n\r\nif (getWidth() < 500) {\r\n    maxPageBtns = 6;\r\n}\r\nif (getWidth() >= 500 && getWidth() < 700) {\r\n    maxPageBtns = 8;\r\n}\r\nif (getWidth() > 700 && getWidth() < 900) {\r\n    maxPageBtns = 10;\r\n}\r\nif (getWidth() > 900 && getWidth() < 1024) {\r\n    maxPageBtns = 15;\r\n}\r\nif (getWidth() > 1024) {\r\n    maxPageBtns = 20;\r\n}\r\n\r\nlet pagesQuantityCalc;\r\n\r\nconst setPages = (recordsNumber) => {\r\n    pagesQuantityCalc = Math.ceil(recordsNumber / recordsOnPage);\r\n\r\n    if (pagesQuantityCalc > maxPageBtns) {\r\n        pagesSwitchLoc.replaceChildren();\r\n\r\n        for (n = 1; n <= maxPageBtns; n++) {\r\n            if (n === 1) {\r\n                pagesSwitchLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<div class=\"page active\">${n}</div>`\r\n                );\r\n            } else {\r\n                pagesSwitchLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<div class=\"page\">${n}</div>`\r\n                );\r\n            }\r\n        }\r\n        pagesSwitchLoc.insertAdjacentHTML(\r\n            \"beforeend\",\r\n            `<div class=\"next active\"><img src=\"./img/chevron-right.svg\" alt=\"\" /></div>`\r\n        );\r\n        let nextBtnLoc = document.querySelector(\".next\");\r\n        nextBtnLoc.addEventListener(\"click\", () => {\r\n            moveNextPagesBtns();\r\n        });\r\n    } else {\r\n        pagesSwitchLoc.replaceChildren();\r\n\r\n        for (n = 1; n <= pagesQuantityCalc; n++) {\r\n            if (n === 1) {\r\n                pagesSwitchLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<div class=\"page active\">${n}</div>`\r\n                );\r\n            } else {\r\n                pagesSwitchLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<div class=\"page\">${n}</div>`\r\n                );\r\n            }\r\n        }\r\n\r\n        pagesSwitchLoc.insertAdjacentHTML(\r\n            \"beforeend\",\r\n            `<div class=\"next\"><img src=\"\" alt=\"\" /></div>`\r\n        );\r\n    }\r\n\r\n    pagesSwitchLoc.insertAdjacentHTML(\r\n        \"afterbegin\",\r\n        `<div class=\"prev\"><img src=\"\" alt=\"\" /></div>`\r\n    );\r\n\r\n    pageButtonsLoc = document.querySelectorAll(\".page\");\r\n    pageButtonsLoc.forEach((el) => {\r\n        el.addEventListener(\"click\", (e) => {\r\n            changePage(e.target);\r\n        });\r\n    });\r\n};\r\n\r\n// create AWARDED RECORDS BOXES ///////////////////////////////////////////////\r\nconst createAwardedRecordBoxes = (recordsArray, filterConfigData) => {\r\n\r\n    awardedResultsLoc.replaceChildren();\r\n\r\n    let awardedRecordsArray = recordsArray.filter((elem) => {\r\n        return elem.awarded;  \r\n    });\r\n\r\n    console.log(awardedRecordsArray)\r\n\r\n    if (awardedRecordsArray.length > 0) {\r\n\r\n        if (filterConfigData.remote_filter) {\r\n            awardedRecordsArray = awardedRecordsArray.filter((elem) => {\r\n                return elem.remote;\r\n            });\r\n        }\r\n        \r\n        if (filterConfigData.language_filter.length > 0) {\r\n            filterAwarded(filterConfigData.language_filter, awardedRecordsArray, \"lang\");\r\n        }\r\n\r\n        if (filterConfigData.branche_filter.length > 0) {\r\n            filterAwarded(filterConfigData.branche_filter, awardedRecordsArray, \"branche\");\r\n        }\r\n\r\n        if (filterConfigData.location_country_filter.length > 0) {\r\n            filterAwarded(filterConfigData.location_country_filter, awardedRecordsArray, \"country\");\r\n        }\r\n\r\n        if (filterConfigData.location_city_filter.length > 0) {\r\n            filterAwarded(filterConfigData.location_city_filter, awardedRecordsArray, \"city\");\r\n        }\r\n\r\n        if (filterConfigData.recruitmentType_filter.length > 0) {\r\n            filterAwarded(filterConfigData.recruitmentType_filter, awardedRecordsArray, \"recruitmentType\");\r\n        }\r\n\r\n        for (i = firstRecordNumber; i < 10; i++) {\r\n            if (awardedRecordsArray[i]) {\r\n                let borderColorClass = \"\";\r\n                let textColorClass = \"\";\r\n\r\n                if (awardedRecordsArray[i].recruitmentType === \"PT\") {\r\n                    borderColorClass = \"pt-border\";\r\n                    textColorClass = \"pt-text\";\r\n                }\r\n                if (awardedRecordsArray[i].recruitmentType === \"RS\") {\r\n                    borderColorClass = \"rs-border\";\r\n                    textColorClass = \"rs-text\";\r\n                }\r\n                if (awardedRecordsArray[i].recruitmentType === \"WEW\") {\r\n                    borderColorClass = \"wew-border\";\r\n                    textColorClass = \"wew-text\";\r\n                }\r\n\r\n                let formaZatrudnienia = \"\";\r\n\r\n                if (awardedRecordsArray[i].jobForm) {\r\n                    awardedRecordsArray[i].jobForm.forEach(function (elem) {\r\n                        formaZatrudnienia =\r\n                            formaZatrudnienia + \"<p>\" + elem + \"</p>\";\r\n                    });\r\n                }\r\n\r\n                awardedResultsLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<a href=\"${\r\n                        awardedRecordsArray[i].url\r\n                    }\" target=\"_blank\"><div class=\"result ${borderColorClass}\">\r\n                <div class=\"top\">\r\n                \r\n                        <div class=\"lang\">\r\n                            <p>${awardedRecordsArray[i].lang}</p>\r\n                        </div>\r\n                        <div class=\"branche-name\">\r\n                            <div class=\"branche\">${\r\n                                awardedRecordsArray[i].branche\r\n                                    ? awardedRecordsArray[i].branche\r\n                                    : \"\"\r\n                            }</div>\r\n                            <div class=\"name ${textColorClass}\">${\r\n                        awardedRecordsArray[i].name\r\n                    }</div>\r\n                        </div>\r\n                    \r\n                </div>\r\n\r\n                <div class=\"bottom\">\r\n                    <div class=\"city-container\">\r\n                        <div class=\"city\"><img src=\"./img/location_dot.svg\">${\r\n                            awardedRecordsArray[i].city\r\n                        }</div></div>\r\n                        <div class=\"details-container\">\r\n                        ${\r\n                            awardedRecordsArray[i].remote\r\n                                ? \"<div class='remote'>zdalna</div>\"\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            awardedRecordsArray[i].relocation\r\n                                ? \"<div class='relocation'>relocation</div>\"\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            awardedRecordsArray[i].jobType\r\n                                ? \"<div class='jobtype'>\" +\r\n                                awardedRecordsArray[i].jobType +\r\n                                \"</div>\"\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            awardedRecordsArray[i].visibleRate\r\n                                ? awardedRecordsArray[i].salaryFrom &&\r\n                                awardedRecordsArray[i].salaryTo\r\n                                    ? \"<div class='salary'>\" +\r\n                                    awardedRecordsArray[i].salaryFrom +\r\n                                    \" - \" +\r\n                                    awardedRecordsArray[i].salaryTo +\r\n                                    \"</div>\"\r\n                                    : \"\"\r\n                                : \"\"\r\n                        }\r\n                        <div class=\"employmentform\">${formaZatrudnienia}</div>\r\n                        </div>\r\n                    \r\n                </div>\r\n\r\n                <div class=\"ribbon-wrap\">\r\n                        <div class=\"ribbon\">\r\n                                <img src=\"./img/star.svg\" alt=\"\">\r\n                                <img src=\"./img/star.svg\" alt=\"\">\r\n                                <img src=\"./img/star.svg\" alt=\"\">\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n\r\n                \r\n\r\n            </div></a>`\r\n                );\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n// show RECORDS NUMBER ///////////////////////////////////////////////\r\nconst summariseDownload = (recordsNumber) => {\r\n    recNumLoc.innerText = `Znaleziono ${recordsNumber} ogłoszeń`;\r\n    if (!recordsNumber) {\r\n        noResultsLoc.classList.add(\"active\");\r\n    } else {\r\n        noResultsLoc.classList.remove(\"active\");\r\n    }\r\n};\r\n\r\n// create FILTER DATA from API data ///////////////////////////////////////////////\r\nconst createDataForFilters = (\r\n    branche,\r\n    jobForm,\r\n    jobType,\r\n    lang,\r\n    visibleRate,\r\n    salaryFrom,\r\n    salaryTo,\r\n    country,\r\n    city,\r\n    lati,\r\n    longi\r\n) => {\r\n   \r\n    if (filterBranchesList.indexOf(branche) === -1 && branche !== undefined) {\r\n        if (filterConfigData.branche_filter.length) {\r\n            if (filterConfigData.branche_filter.indexOf(branche) !== -1) {\r\n                filterBranchesList.push(branche);\r\n            }\r\n        } else {\r\n            filterBranchesList.push(branche);\r\n        }\r\n       \r\n    }\r\n\r\n    if (jobForm) {\r\n        jobForm.forEach(function (elem) {\r\n            if (filterJobFormList.indexOf(elem) === -1) {\r\n                filterJobFormList.push(elem);\r\n            }\r\n        });\r\n    }\r\n\r\n    // if (filterJobTypeList.indexOf(jobType) === -1 && jobType !== undefined) {\r\n    //     filterJobTypeList.push(jobType);\r\n    // }\r\n\r\n    // if (filterLangList.indexOf(lang) === -1) {\r\n\r\n    //     if (filterConfigData.language_filter.length) {\r\n    //         if (filterConfigData.language_filter.indexOf(lang) !== -1) {\r\n    //             filterLangList.push(lang);\r\n    //         }\r\n    //     } else {\r\n    //         filterLangList.push(lang);\r\n    //     }\r\n    // }\r\n\r\n    // if (visibleRate) {\r\n    //     if (salaryFrom < filterMinSalary) {\r\n    //         filterMinSalary = salaryFrom;\r\n    //     }\r\n    //     if (salaryTo > filterMaxSalary) {\r\n    //         filterMaxSalary = salaryTo;\r\n    //     }\r\n    // }\r\n\r\n    // if (filterConfigData.location_country_filter.length) {\r\n        \r\n    //     if (filterConfigData.location_country_filter.indexOf(country) !== -1) {\r\n    //         if (filterCountriesList[country]) {\r\n    //             if (\r\n    //                 filterCountriesList[country].findIndex(\r\n    //                     (arr_el) => arr_el.city === city\r\n    //                 ) === -1\r\n    //             ) {\r\n    //                 if (filterConfigData.location_city_filter.length) {\r\n    //                     if (filterConfigData.location_city_filter.indexOf(city) !== -1) {\r\n    //                         filterCountriesList[country].push({\r\n    //                             city: city,\r\n    //                             lati: lati,\r\n    //                             longi: longi,\r\n    //                         });\r\n    //                     }\r\n    //                 } else {\r\n    //                     filterCountriesList[country].push({\r\n    //                         city: city,\r\n    //                         lati: lati,\r\n    //                         longi: longi,\r\n    //                     });\r\n    //                 }\r\n    //             }\r\n    //         } else {\r\n    //             filterCountriesList[country] = [];\r\n    //             if (filterConfigData.location_city_filter.length) {\r\n    //                 if (filterConfigData.location_city_filter.indexOf(city) !== -1) {\r\n    //                     filterCountriesList[country].push({\r\n    //                         city: city,\r\n    //                         lati: lati,\r\n    //                         longi: longi,\r\n    //                     });\r\n    //                 }\r\n    //             } else {\r\n    //                 filterCountriesList[country].push({\r\n    //                     city: city,\r\n    //                     lati: lati,\r\n    //                     longi: longi,\r\n    //                 });\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    // } else {\r\n        \r\n    //     if (filterCountriesList[country]) {\r\n    //         if (\r\n    //             filterCountriesList[country].findIndex(\r\n    //                 (arr_el) => arr_el.city === city\r\n    //             ) === -1\r\n    //         ) {\r\n    //             filterCountriesList[country].push({\r\n    //                 city: city,\r\n    //                 lati: lati,\r\n    //                 longi: longi,\r\n    //             });\r\n    //         }\r\n    //     } else {\r\n    //         filterCountriesList[country] = [];\r\n    //         filterCountriesList[country].push({\r\n    //             city: city,\r\n    //             lati: lati,\r\n    //             longi: longi,\r\n    //         });\r\n    //     }\r\n    // }\r\n};\r\n\r\n// create OBJECTS ARRAY from Raw API JSON ///////////////////////////////////////////////\r\nconst reworkData = (rawAPIArray) => {\r\n    rawAPIArray.forEach((el) => {\r\n        if (el.options.job_location) {\r\n            parsedJobLocation = JSON.parse(el.options.job_location);\r\n        }\r\n\r\n        allRecordsArray.push({\r\n            url: el.url,\r\n            name: el.advert.name,\r\n            branche: el.options.branches,\r\n            lang: el.advert.language,\r\n            jobType: el.options.job_type,\r\n            visibleRate: parseInt(el.options._Widoczna_stawka),\r\n            salaryFrom: parseInt(el.options._spodziewane_wynagrodzenie_od),\r\n            salaryTo: parseInt(el.options._spodziewane_wynagrodzenie_do),\r\n            remote: el.options.remote,\r\n            relocation: el.options._relokacja,\r\n            recruitmentType: el.options._rekrutacja_rodzaj,\r\n            jobForm: el.options._forma_zatrudnienia,\r\n            country: parsedJobLocation.country,\r\n            city: parsedJobLocation.locality,\r\n            lati: parseFloat(parsedJobLocation.latitude),\r\n            longi: parseFloat(parsedJobLocation.longitude),\r\n            description: el.advert.values,\r\n            awarded: el.awarded,\r\n        });\r\n\r\n        createDataForFilters(\r\n            el.options.branches,\r\n            el.options._forma_zatrudnienia,\r\n            el.options.job_type,\r\n            el.advert.language,\r\n            parseInt(el.options._Widoczna_stawka),\r\n            parseInt(el.options._spodziewane_wynagrodzenie_od),\r\n            parseInt(el.options._spodziewane_wynagrodzenie_do),\r\n            parsedJobLocation.country,\r\n            parsedJobLocation.locality,\r\n            parseFloat(parsedJobLocation.latitude),\r\n            parseFloat(parsedJobLocation.longitude)\r\n        );\r\n    });\r\n};\r\n\r\n// gets DATA FROM API ///////////////////////////////////////////////\r\nconst getAPI = (apiPage) => {\r\n    const response = fetch(\r\n        \"https://grupaprogres.traffit.com/public/job_posts/published\",\r\n        {\r\n            mode: \"cors\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"X-Request-Page-Size\": \"100\",\r\n                \"X-Request-Current-Page\": apiPage,\r\n                \"X-Request-Sort\": '{\"sort_by\": \"id\", \"direction\": \"ASC\"}',\r\n            },\r\n        }\r\n    );\r\n\r\n    return response;\r\n};\r\n\r\nconst loopOnAPI = (jsonData, filterConfigData) => {\r\n    if (jsonData.length > 0) {\r\n        rawAPIArray = rawAPIArray.concat(jsonData);\r\n        apiPage++;\r\n        console.log(\"rawAPIArray\", rawAPIArray)\r\n        createRecordsObjFromAPI(apiPage, filterConfigData);\r\n    } else {\r\n        reworkData(rawAPIArray);\r\n        console.log(\"allRecordsArray\", allRecordsArray)\r\n        recordsNumber = rawAPIArray.length;\r\n        console.log(\"recordsNumber\", recordsNumber)\r\n        // summariseDownload(recordsNumber); // not used\r\n        createAwardedRecordBoxes(allRecordsArray, filterConfigData); // obecnie brak wyróżnionych ogłoszeń - wymagane ostylowanie css gdy się pojawią\r\n        setPages(recordsNumber); // trzeba dokończyć listenery na utworzonych buttonach\r\n        createFilterLists(filterConfigData);\r\n        // dropDownBtnStart();\r\n        // pagesContainerStart();\r\n        // createFilteredRecordsArray();\r\n\r\n        \r\n    }\r\n};\r\n\r\nasync function createRecordsObjFromAPI(apiPage, filterConfigData) {\r\n    const rawData = await getAPI(apiPage);\r\n    const jsonData = await rawData.json();\r\n    loopOnAPI(jsonData, filterConfigData);\r\n}\r\n\r\n// consider configuration filters ////////////////////////\r\nconst getConfigFilter = () => {\r\n    const response = fetch(\"./config/config.json\");\r\n    return response;\r\n};\r\n\r\nasync function readConfigFilter() {\r\n    try {\r\n        const rawData = await getConfigFilter();\r\n        filterConfigData = await rawData.json();\r\n        console.log(\"filterConfigData\", filterConfigData)\r\n        createRecordsObjFromAPI(apiPage, filterConfigData);\r\n    } catch (e) {\r\n        console.error(e);\r\n        createRecordsObjFromAPI(apiPage);\r\n    }\r\n}\r\n\r\nreadConfigFilter();"]}